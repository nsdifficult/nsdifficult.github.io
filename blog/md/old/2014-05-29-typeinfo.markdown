---
layout: post
title: "《Java编程思想》读书笔记之类型信息 "
date: 2014-05-29 19:06
comments: true
categories: 
---

### RTTI
1.  RTTI即Run-Time Type Information（运行时类型信息）
2.  类型信息在运行时表示的工作由Class对象完成，它包含了与类有关的信息（可作用于这些实例的所有方法代码，类的所有静态成员），Class对象可以制造类的实例。因此，Class引用表示的就是它所指向的对象的确切类型，而该对象就是Class类的一个对象。<!--more-->
3.  事实上，Class对象就是用来创建类的所有的“常规”对象的。Java使用Class对像来执行其RTTI，即使你正在执行的是类型转换这样的操作。
4.  每个类都有一个Class对象。每编译一个新类就会产生一个Class对象。为了生成这个类的对象，运行这个程序的Java虚拟机将使用被称为“类加载器”的子系统。
5.  当程序创建第一个对类的静态成员的引用时，就会加载这个类。这个证明构造器也是类的静态方法，即使没有使用static修饰。
6.  因此，Java在运行之前不是完全加载，其各个部分时必需时才加载的。
7.  获得Class引用的方法有：`Class.forName("A")`;`A.class`;`A.getCalss()`。
8.  初始化有效地实现了尽可能的“惰性”。仅使用`.class`语法来获得对类的引用不会引发初始化；`Class.forName()`会立即引发初始化；如果`static final`修饰的变量是“编译期常量”（`static final int staticFinal2 = ClassInitialization.rand.nextInt(1000);`就不是，而`static final int staticFinal = 47;`是。）如果static域不是final的，则它在被访问时总是要求在它被读取之前，要先进行连接和初始化。   

```java
package typeInfomation;
import java.util.*;
class Initable {
	static final int staticFinal = 47;
	static final int staticFinal2 = ClassInitialization.rand.nextInt(1000);
	static {
		System.out.println("Initializing Initable");
	}
}
class Initable2 {
	static int staticNonFinal = 147;
	static {
		System.out.println("Initializing Initable2");
	}
}
class Initable3 {
	static int staticNonFinal = 74;
	static {
		System.out.println("Initializing Initable3");
	}
}
public class ClassInitialization {
	public static Random rand = new Random(47);
	public static void main(String[] args) throws Exception {
		Class initable = Initable.class;
		System.out.println("After creating Initable ref");
		// Does not trigger initialization:
		System.out.println(Initable.staticFinal);
		// Does trigger initialization:
		System.out.println(Initable.staticFinal2);
		// Does trigger initialization:
		System.out.println(Initable2.staticNonFinal);
		Class initable3 = Class.forName("typeInfomation.Initable3");
		System.out.println("After creating Initable3 ref");
		System.out.println(Initable3.staticNonFinal);
	}
}
```

输出：   

	After creating Initable ref
	47
	Initializing Initable
	258
	Initializing Initable2
	147
	Initializing Initable3
	After creating Initable3 ref
	74
	
9. 可以使用范型来对Class对象的类型进行限定。如`Class<Integer> genericIntClass`;`Class<?>`;`Class<? extends Number>`。注意`Class<?>`比`Class`更被建议，即便他们是等价的。
10. 还可以使用`House.class.cast(b)`来进行类型转换。
11. RTTI在Java中还有第三种形式，就是关键字instanceOf(),它告诉我们对象是不是某个特定类型的实例。