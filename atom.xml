<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[RONGYI.WORK]]></title>
  <link href="http://rongyi.work/atom.xml" rel="self"/>
  <link href="http://rongyi.work/"/>
  <updated>2015-11-29T11:58:47+08:00</updated>
  <id>http://rongyi.work/</id>
  <author>
    <name><![CDATA[易荣义]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[帮家里推销蜂蜜]]></title>
    <link href="http://rongyi.work/blog/2015/11/28/honey/"/>
    <updated>2015-11-28T09:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/11/28/honey</id>
    <content type="html"><![CDATA[<h3>产自哪？</h3>

<p>都是我爸自己的蜂场产的。</p>

<h3>我为啥要卖？</h3>

<p>帮我爸卖的，卖给批发商太便宜。算是增加一个销路，欢迎购买</p>

<h3>蜂蜜啥样的？</h3>

<p><img src="http://rongyi.work/images/honey/1.jpg" alt="蜂蜜图片" />
<img src="http://rongyi.work/images/honey/2.jpg" alt="蜂蜜图片" /></p>

<h3>有几种蜂蜜？</h3>

<p><em>有两种蜂蜜：<strong>荆条蜂蜜(因为荆条和枣树花期一样，所以混有少量枣花蜜)</strong>和<strong>槐花蜜</strong></em></p>

<h3>怎么卖？</h3>

<ol>
<li><strong>荆条蜂蜜</strong>：  25元/斤</li>
<li><span style="text-decoration:line-through;">槐花蜜（已售完）： 30元/斤</span></li>
</ol>


<h3>这个价格贵么？</h3>

<p>可以到超市逛逛看看超市价格＝＝</p>

<h3>购买方式？</h3>

<ol>
<li>直接联系我：15301399726，或者微信搜：chinazhidubu</li>
<li>微店购买（荣义的蜂蜜小店）： <a href="http://weidian.com/s/838884573?wfr=c">http://weidian.com/s/838884573?wfr=c</a></li>
</ol>


<h3>不满意想退货？</h3>

<p>直接联系我购买的，直接和我说，微信或者支付宝给您退钱，不用等您退货。</p>

<h3>欢迎咨询购买</h3>

<p><img src="http://rongyi.work/images/honey/3.jpg" alt="蜂蜜图片" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[slf4j简单梳理]]></title>
    <link href="http://rongyi.work/blog/2015/11/22/log/"/>
    <updated>2015-11-22T09:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/11/22/log</id>
    <content type="html"><![CDATA[<h2>slf4j简单介绍</h2>

<p>slf4j是Simple Logging Facade for Java (SLF4J)的缩写。我理解的就是，它通过门面模式使得使用者不用关心具体的各个实际日志实现库（如java.util.logging, logback and log4j）的内部细节，只需要按照slf4j提供的协议使用即可，这样一个系统不同模块便可以使用不同日志实现库，且替换简单（换jar包即可，不需要改代码）。<!--more--></p>

<h2>slf4j和日志具体实现的关系</h2>

<p>先来看看sl4j官网的这张图</p>

<p><img src="http://rongyi.work/images/log/1.png" title="slf4j" alt="Alt Text" /></p>

<p>从这张图可以看出来：</p>

<ol>
<li>slf4j只提供接口，不提供具体实现。</li>
<li>支持slf4j的日志实现分native implemention和非native implemention，且非本地实现需要adapter。logback属于本地实现，而log4j是非本地实现。</li>
<li>各个日志实现搭配slf4j需要的jar包。</li>
</ol>


<h2>slf4j原理的简单分析</h2>

<ol>
<li>当用户获取logger时（LoggerFactory.getLogger(App.class)）开始初始化</li>
<li>getLogger方法则尝试获得ILoggerFactory</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Logger</span> <span class="nf">getLogger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ILoggerFactory</span> <span class="n">iLoggerFactory</span> <span class="o">=</span> <span class="n">getILoggerFactory</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">iLoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>getILoggerFactory()里会执行初始化</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">ILoggerFactory</span> <span class="nf">getILoggerFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span> <span class="o">==</span> <span class="n">UNINITIALIZED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">ONGOING_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>            <span class="n">performInitialization</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">switch</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">SUCCESSFUL_INITIALIZATION:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">().</span><span class="na">getLoggerFactory</span><span class="o">();</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">NOP_FALLBACK_INITIALIZATION:</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">NOP_FALLBACK_FACTORY</span><span class="o">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">FAILED_INITIALIZATION:</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">UNSUCCESSFUL_INIT_MSG</span><span class="o">);</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">ONGOING_INITIALIZATION:</span>
</span><span class='line'>            <span class="c1">// support re-entrant behavior.</span>
</span><span class='line'>            <span class="c1">// See also http://jira.qos.ch/browse/SLF4J-97</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">TEMP_FACTORY</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Unreachable code&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>performInitialization()方法里执行绑定操作会绑定LoggerFactoryBinder的实现（由具体日志实现库提供）</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">performInitialization</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">bind</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">INITIALIZATION_STATE</span> <span class="o">==</span> <span class="n">SUCCESSFUL_INITIALIZATION</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">versionSanityCheck</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>bind()方法找到指定路径下的StaticLoggerBinder，并绑定。</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Set</span><span class="o">&lt;</span><span class="n">URL</span><span class="o">&gt;</span> <span class="n">staticLoggerBinderPathSet</span> <span class="o">=</span> <span class="n">findPossibleStaticLoggerBinderPathSet</span><span class="o">();</span>
</span><span class='line'>            <span class="n">reportMultipleBindingAmbiguity</span><span class="o">(</span><span class="n">staticLoggerBinderPathSet</span><span class="o">);</span>
</span><span class='line'>            <span class="c1">// the next line does the binding</span>
</span><span class='line'>            <span class="n">StaticLoggerBinder</span><span class="o">.</span><span class="na">getSingleton</span><span class="o">();</span>
</span><span class='line'>            <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">SUCCESSFUL_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>            <span class="n">reportActualBinding</span><span class="o">(</span><span class="n">staticLoggerBinderPathSet</span><span class="o">);</span>
</span><span class='line'>            <span class="n">fixSubstitutedLoggers</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NoClassDefFoundError</span> <span class="n">ncde</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">ncde</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">messageContainsOrgSlf4jImplStaticLoggerBinder</span><span class="o">(</span><span class="n">msg</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">NOP_FALLBACK_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>                <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="s">&quot;Failed to load class \&quot;org.slf4j.impl.StaticLoggerBinder\&quot;.&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="s">&quot;Defaulting to no-operation (NOP) logger implementation&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="s">&quot;See &quot;</span> <span class="o">+</span> <span class="n">NO_STATICLOGGERBINDER_URL</span> <span class="o">+</span> <span class="s">&quot; for further details.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">failedBinding</span><span class="o">(</span><span class="n">ncde</span><span class="o">);</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">ncde</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NoSuchMethodError</span> <span class="n">nsme</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">nsme</span><span class="o">.</span><span class="na">getMessage</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">msg</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">msg</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&quot;org.slf4j.impl.StaticLoggerBinder.getSingleton()&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">INITIALIZATION_STATE</span> <span class="o">=</span> <span class="n">FAILED_INITIALIZATION</span><span class="o">;</span>
</span><span class='line'>                <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="s">&quot;slf4j-api 1.6.x (or later) is incompatible with this binding.&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="s">&quot;Your binding is version 1.5.5 or earlier.&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="s">&quot;Upgrade your binding to version 1.6.x.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">nsme</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">failedBinding</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">&quot;Unexpected initialization failure&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>findPossibleStaticLoggerBinderPathSet()方法找可能的StaticLoggerBinder.class</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">STATIC_LOGGER_BINDER_PATH</span> <span class="o">=</span> <span class="s">&quot;org/slf4j/impl/StaticLoggerBinder.class&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">URL</span><span class="o">&gt;</span> <span class="nf">findPossibleStaticLoggerBinderPathSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// use Set instead of list in order to deal with bug #138</span>
</span><span class='line'>        <span class="c1">// LinkedHashSet appropriate here because it preserves insertion order during iteration</span>
</span><span class='line'>        <span class="n">Set</span><span class="o">&lt;</span><span class="n">URL</span><span class="o">&gt;</span> <span class="n">staticLoggerBinderPathSet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashSet</span><span class="o">&lt;</span><span class="n">URL</span><span class="o">&gt;();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ClassLoader</span> <span class="n">loggerFactoryClassLoader</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Enumeration</span><span class="o">&lt;</span><span class="n">URL</span><span class="o">&gt;</span> <span class="n">paths</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">loggerFactoryClassLoader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">paths</span> <span class="o">=</span> <span class="n">ClassLoader</span><span class="o">.</span><span class="na">getSystemResources</span><span class="o">(</span><span class="n">STATIC_LOGGER_BINDER_PATH</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">paths</span> <span class="o">=</span> <span class="n">loggerFactoryClassLoader</span><span class="o">.</span><span class="na">getResources</span><span class="o">(</span><span class="n">STATIC_LOGGER_BINDER_PATH</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">while</span> <span class="o">(</span><span class="n">paths</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">URL</span> <span class="n">path</span> <span class="o">=</span> <span class="n">paths</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
</span><span class='line'>                <span class="n">staticLoggerBinderPathSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Util</span><span class="o">.</span><span class="na">report</span><span class="o">(</span><span class="s">&quot;Error getting resources from path&quot;</span><span class="o">,</span> <span class="n">ioe</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">staticLoggerBinderPathSet</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>StaticLoggerBinder则提供具体的ILoggerFactory实现</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="nf">StaticLoggerBinder</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">loggerFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleLoggerFactory</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ILoggerFactory</span> <span class="nf">getLoggerFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">loggerFactory</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>得到ILoggerFactory后，便可从其获得具体的Logger实现</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">Logger</span> <span class="nf">getLogger</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Logger</span> <span class="n">simpleLogger</span> <span class="o">=</span> <span class="n">loggerMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">simpleLogger</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">simpleLogger</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Logger</span> <span class="n">newInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleLogger</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Logger</span> <span class="n">oldInstance</span> <span class="o">=</span> <span class="n">loggerMap</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">newInstance</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">oldInstance</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">newInstance</span> <span class="o">:</span> <span class="n">oldInstance</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>之后便可以打印日志了，哈哈～～简单吧</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">Logger</span> <span class="n">log</span> <span class="o">=</span> <span class="n">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">App</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testLog</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;yirongyi&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&quot;Hello,{}!&quot;</span><span class="o">,</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">App</span> <span class="n">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">App</span><span class="o">();</span>
</span><span class='line'>        <span class="n">app</span><span class="o">.</span><span class="na">testLog</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>日志使用的一些技巧总结</h2>

<ol>
<li>不要使用＋连接字符，slf4j支持占位符，更省内存。</li>
<li>尽量简单扼要，用词统一，便于查找。</li>
<li>在关键地方打印关键信息，如和其他系统交互的地方，打印发送和返回数据。</li>
<li>在写公用的模块或者工具等项目中的输出日志的代码时尽量使用slf4j，不要使用具体的日志实现库。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再谈数据库事务]]></title>
    <link href="http://rongyi.work/blog/2015/07/14/dbTransaction/"/>
    <updated>2015-07-14T09:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/07/14/dbTransaction</id>
    <content type="html"><![CDATA[<h2>放在前面要说的</h2>

<p>本文文字完全总结（95%）自《Spring3.x企业应用开发实战》，《高性能MySQL》。写在这里是为了方便自己查阅。<!--more--></p>

<h2>定义</h2>

<blockquote><p>数据库事务(Database Transaction) ，是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。 事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID（原子性、一致性、隔离性和持久性）属性。事务是数据库运行中的一个逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。</p></blockquote>

<h3>ACID说明</h3>

<ul>
<li>原子性(Atomic)：表示组成一个事务的多个数据操作是一个不可分割的原子单元，只有所有的操作执行成功，整个事务才提交，事务中任何一个数据库操作失败，已经执行的任何操作都必须撤销，让数据库返回到初始状态。</li>
<li>一致性(Consistency)：数据库总是从一个一致性的状态转换到另外一个一致性的状态。事务操作成功后，数据库所处的状态和它的业务规则是一致的，即数据不会被破坏。如从A账户转账100元到B账户，不管操作成功与否，A和B的存款总额是不变的。</li>
<li>隔离性(Isolation)：在并发操作时，不同的事务拥有各自的数据空间，它们的操作不会对对方产生干扰。准确的说，并非要求做到完全干扰，数据库规定了多种事务隔离级别，不同隔离级别对应不同的干扰程度，隔离级别越高，数据一致性越好，但并发性越弱。</li>
<li>持久性(Durabiliy)：一旦事务提交成功后，事务中所有的数据操作都必须被持久化到数据库中，即使提交事务后，数据库马上崩溃，在数据库重启时，也必须保证能够通过某种机制恢复数据。</li>
<li>在这些事务特性中，数据“一致性”是最终目标，其他的特性都是为达到这个目标的措施、要求或手段。 <br/>
数据库管理系统一般采用重新执行日志保证<strong>原子性</strong>、<strong>一致性</strong>和<strong>持久性</strong>。</li>
<li>和Java程序采用对象锁机制进行线程同步类似，数据库管理系统采用数据库锁机制保证事务的<strong>隔离性</strong>。当多个事务试图对相同的数据进行操作时，只有持有锁的事务才能操作数据，直到前一个事务完成后，后面的事务才有机会对数据进行操作。

<h2>数据并发的问题</h2>

可能会有多个客户端同时访问数据库，多个事务可能同时访问相同的数据，如果没有采取必要的隔离措施，就会导致各种并发问题，破坏数据的完整性。这些问题可以归为5类，包括3类数据读问题（<strong>脏读</strong>、<strong>不可重复读</strong>、<strong>幻象读</strong>）以及2类数据更新问题（<strong>第一类丢失更新</strong>和<strong>第二类丢失更新</strong>）。

<h3>脏读(dirty read)</h3>

A事务读取B事务尚未提交的更改数据，并在这个数据的基础上操作。如果恰巧B事务回滚，那么A事务读到的数据根本是不被承认的。来看取款事务和转账事务并发时引发的脏读场景： <br/>
<img src="http://rongyi.work/images/transaction/dirtyread.png" alt="dirtyread.png" />

<h3>不可重复读</h3>

<p>不可重复读是指A事务读取了B事务已经提交的更改数据（<strong>更改</strong>和<strong>删除</strong>）和在B事务未完成时读的数据不一致。假设A在取款事务的过程中，B往该账户转账100元，A两次读取账户的余额发生不一致： <br/>
<img src="http://rongyi.work/images/transaction/nonrepeatRead.png" alt="nonrepeatRead.png" /></p></li>
</ul>


<h3>幻象读</h3>

<p>A事务读取B事务提交的<strong>新增</strong>数据，这时A事务将出现幻象读的问题。幻象读一般发生在计算统计数据的事务中，举一个例子，假设银行系统在同一个事务中，两次统计存款账户的总金额，在两次统计过程中，刚好新增了一个存款账户，并存入100元，这时，两次统计的总金额将不一致： <br/>
<img src="http://rongyi.work/images/transaction/phantomRead.png" alt="phantomRead.png" /></p>

<p>如果新增数据刚好满足事务的查询条件,这个新数据就进入了事务的视野，因而产生了两个统计不一致的情况。   <br/>
幻象读和不可重复读是两个容易混淆的概念，前者是指读到了其他已经提交事务的<strong>新增</strong>数据，而后者是指读到了已经提交事务的更改数据（<strong>更改</strong>或<strong>删除</strong>），为了避免这两种情况，采取的对策是不同的，防止读取到更改数据，只需要对操作的数据添加<strong>行级锁</strong>，阻止操作中的数据发生变化，而防止读取到新增数据，则往往需要添加<strong>表级锁</strong>——将整个表锁定，防止新增数据。</p>

<h3>第一类丢失更新</h3>

<p>A事务撤销时，把已经提交的B事务的更新数据覆盖了。
<img src="http://rongyi.work/images/transaction/1thLostUpdate.png" alt="1thLostUpdate.png" /></p>

<h3>第二类丢失更新</h3>

<p>A事务覆盖B事务已经提交的数据，造成B事务所做的操作丢失。
<img src="http://rongyi.work/images/transaction/2thLostUpdate.png" alt="2thLostUpdate.png" /></p>

<h2>数据库锁机制</h2>

<p>前文讲到，数据库管理系统采用数据库锁机制保证事务的<strong>隔离性</strong>。按照锁定的对象不同，一般分为表锁定和行锁定，前者对整个表进行锁定，而后者对表中特定行进行锁定。从并发事务锁定的关系上看，可以分为共享锁定和独占锁定。共享锁定会防止独占锁定，但允许其他的共享锁定。而独占锁定既防止其他的独占锁定，也防止其他的共享锁定。为了更改数据，数据库必须在进行更改的行上施加行独占锁定，INSERT、UPDATE、DELETE和SELECT FOR UPDATE语句都会隐式采用必要的行锁定。</p>

<h3>隔离级别</h3>

<p>尽管数据库为用户提供了锁的DML(data manipulation language即数据操纵语言：SELECT、UPDATE、INSERT、DELETE)操作方式，但直接使用锁管理非常麻烦，因此数据库为用户提供了自动锁机制。只要用户指定会话的事务隔离级别，数据库就会分析事务中的SQL语句，然后自动为事务操作的数据资源加上适合的锁。   <br/>
<img src="http://rongyi.work/images/transaction/IsolationLevel.png" alt="IsolationLevel.png" /></p>

<h4>READ UNCOMMITTED(未提交读)</h4>

<p>在这个级别，事务中的修改，即使没有提交，对其他事务也都是可见的。事务可以读取未提交的数据，这也被称为脏读（dirty read）。这个级别会导致很多问题，从性能上来说，READ UNCOMMITED不会比其他的级别好太多，但缺乏其他级别的很多好处，除非非常必要的理由，在实际应用中一般很少使用。</p>

<h4>READ COMMITTED(提交读)</h4>

<p>大多数DBMS默认的隔离级别是READ COMMITTED（但MySQL不是）。这个事务满足：一个事务开始时，只能“看见”已经提交的事务所做的修改。换句话说，一个事务从开始直到提交之前，所做的任何修改对其他事务都是不可见的。这个级别也叫做不可重复读（nonrepeatable read）,因为两次执行同样的查询，可能会得到不一样的结果。</p>

<h4>REPEATABLE READ(可重复读)</h4>

<p>MySQL默认事务隔离级别。该级别解决了脏读的问题，但不能解决幻读（Phantom Read）的问题。InnoDB和XtraDB存储引擎通过多版本控制（MVCC,Multiversion Concurrency Control）解决了幻读的问题。</p>

<h4>SERIALIZABLE(可串行化)</h4>

<p>最高的隔离级别，通过强制事务串行执行，避免了幻读的问题。简单来说，SERIALIZABLE会在读取的每一行数据上都加锁。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Java编程思想》读书笔记之多线程(二)]]></title>
    <link href="http://rongyi.work/blog/2015/06/18/javaThread2/"/>
    <updated>2015-06-18T09:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/06/18/javaThread2</id>
    <content type="html"><![CDATA[<h2>共享受限资源</h2>

<p>基本上所有的并发模式在解决线程冲突问题的时候，都是采用序列化访问共享资源的方案。这意味着在给定时刻只允许一个任务访问共享资源。通常这是通过在代码前加上一条锁语句来实现的，这就使得一段时间内只有一个任务可以运行这段代码。因为锁语句产生了一种互相排斥的效果，所以这种机制称为互赤量(mutex)。 <br/>
共享资源一般是以对象的形式存在的内存片段，但也可以是文件、输入/输出端口，或者是打印机。<!--more--></p>

<h5>何时使用同步</h5>

<p>可以运用Brian的同步规则：</p>

<blockquote><p>如果你正在写一个变量，它可能接下来将被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。</p></blockquote>

<p>使用锁有两种方式：</p>

<h3>使用synchronized</h3>

<h4>对象有锁。</h4>

<p>所有对象都自动包含有单一的锁（也称为监视器）。当在对象上调用其任意的synchronized方法的时候，此对象都被加锁，这时对象上的其他synchronzied方法只有等到前一个方法调用完毕并释放了锁之后才能被调用。 <br/>
一个线程可以多次获得对象的锁。JVM采用计数的方式处理：JVM负责跟踪对象被加锁的次数。只有首先获得了锁的任务才能允许继续获取多个锁。</p>

<h4>类也有锁。</h4>

<p>所以synchronized static 方法可以在类的范围内防止对static数据的并发访问。</p>

<h5>synchronized之临界区</h5>

<p>有时你只是希望多个线程同时访问方法内部的部分代码而不是防止同时访问整改方法。通过这种方式分离出来的代码段被称为临界区（critical section），它也是使用synchronized关键字建立。在这里，synchronized被用来指定某个对象，此对象的锁被用来对花括号内的代码进行同步控制。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">synchronized</span><span class="o">(</span><span class="n">syncObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">//This code can be accessed by only one task at a time</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过使用同步控制块而不是对整个方法进行同步控制，可以使多个任务访问对象的时间性能得到显著提高。</p>

<h3>使用显示的Lock对象</h3>

<p>Java SE5的java.util.concurrent类库还包含有定义在java.util.concurrent.locks中的显式地创建、锁定和释放。因此，它与内建的锁形式相比缺少优雅性。但是，对于解决某些类型的问题来说，它更加灵活。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">X</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">private</span> <span class="kd">final</span> <span class="n">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ReentrantLock</span><span class="o">();</span>
</span><span class='line'>   <span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">m</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>     <span class="n">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>  <span class="c1">// block until condition holds</span>
</span><span class='line'>     <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">// ... method body</span>
</span><span class='line'>     <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">()</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'> <span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>synchronized与Lock区别</h3>

<h4>使用synchronized时在线程失败时，没有机会做任何清理工作，而Lock可以</h4>

<h4>使用Lock可以进行更细粒度的控制，如尝试获得锁，没有则先做其他工作。</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AttemptLocking</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">private</span> <span class="n">ReentrantLock</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ReentrantLock</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">untimed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">captured</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">tryLock</span><span class="o">();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;tryLock(): &quot;</span><span class="o">+</span><span class="n">captured</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">captured</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">timed</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">boolean</span> <span class="n">captured</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">captured</span> <span class="o">=</span> <span class="n">lock</span><span class="o">.</span><span class="na">tryLock</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;tryLock(2,TimeUnit.SECONDS): &quot;</span><span class="o">+</span><span class="n">captured</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">captured</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">lock</span><span class="o">.</span><span class="na">unlock</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">AttemptLocking</span> <span class="n">al</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AttemptLocking</span><span class="o">();</span>
</span><span class='line'>      <span class="n">al</span><span class="o">.</span><span class="na">untimed</span><span class="o">();</span>
</span><span class='line'>      <span class="n">al</span><span class="o">.</span><span class="na">timed</span><span class="o">();</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="o">{</span><span class="n">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);}</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">al</span><span class="o">.</span><span class="na">lock</span><span class="o">.</span><span class="na">lock</span><span class="o">();</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;acquired&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Thread</span><span class="o">.</span><span class="na">yield</span><span class="o">();</span>
</span><span class='line'>      <span class="n">al</span><span class="o">.</span><span class="na">untimed</span><span class="o">();</span>
</span><span class='line'>      <span class="n">al</span><span class="o">.</span><span class="na">timed</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>输出结果为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">tryLock</span><span class="o">():</span> <span class="kc">true</span>
</span><span class='line'><span class="nf">tryLock</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">):</span> <span class="kc">true</span>
</span><span class='line'><span class="nf">tryLock</span><span class="o">():</span> <span class="kc">true</span>
</span><span class='line'><span class="nf">tryLock</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">):</span> <span class="kc">true</span>
</span><span class='line'><span class="n">acquired</span>
</span></code></pre></td></tr></table></div></figure>


<p>ReentrantLock允许你尝试获取但最终未获取锁，这样如果其他人已经获取了这个锁，那你可以决定离开去执行其他一些事情，而不是等待直至这个锁被释放，就像在untimed()方法中所看到。在time()中，作出了尝试去获取锁，该尝试可以在2秒之后失败。在main()中，作为匿名类而创建了一个单独的Thread，它将获取锁，这使得 untimed()和timed()方法对某些事物将产生竞争。</p>

<h3>原子性</h3>

<h4>原子性解释</h4>

<blockquote><p>原子（atom）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为"不可被中断的一个或一系列操作"，在java中就是不能被线程调度机制中断的操作 。 <br/>
在java中可以通过锁（synchronized或者lock）和循环CAS的方式来实现原子操作。</p></blockquote>

<p>原子性可以应用于除long和double之外的所有基本类型之上的简单操作（如读取和写入）。这些操作会被当作不可分（原子）的操作来操作内存。但是JVM可以将64位（long和double变量）的读取和写入当作两个分离的32位操作来执行，这就产生了在一个读取和写入操作中间发生上文切换，从而导致不同的任务可以看到不正确的结果的可能性。</p>

<h4>volatile</h4>

<p>但是当定义long和double变量时，使用volatile关键字，就会获得原子性。不同的JVM可以任意地提供更强的保证，但是你不应该依赖于平台相关的特性。</p>

<h5>volatile可见性</h5>

<p>volatile是轻量的synchronized，它在多处理器开发中保证了共享变量的可见性。可见性的意思是当一个线程修改一个变量时，另外一个线程能读到这个修改的值。   <br/>
Java语言规范第三版中对volatile的定义如下：</p>

<blockquote><p>java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致的更新，线程应该确保通过排他锁单独获得这个变量。Java语言提供了volatile，在某些情况下比锁更加方便。如果一个字段被声明成volatile，java线程内存模型确保所有线程看到这个变量的值是一致的。</p></blockquote>

<p>关于更多的volatile的解释见<a href="http://www.infoq.com/cn/articles/ftf-java-volatile"> 聊聊并发（一）——深入分析Volatile的实现原理</a></p>

<h5>原子类</h5>

<p>Java SE5引入了诸如AtomicInteger、AtomicLong、AtomicReference等特殊的原子性变量类。</p>

<h4>可以对this对象同步，也可以针对另一个对象同步。</h4>

<p>下面的例子演示了两个任务可以同时进入同一个对象，只要这个对象上的方法是在不同的锁上同步的即可：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">DualSynch</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Object</span> <span class="n">syncObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Object</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;f()&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Thread</span><span class="o">.</span><span class="na">yield</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">g</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">synchronized</span> <span class="o">(</span><span class="n">syncObject</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;g()&quot;</span><span class="o">);</span>
</span><span class='line'>              <span class="n">Thread</span><span class="o">.</span><span class="na">yield</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SyncObject</span> <span class="o">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * @param args</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">final</span> <span class="n">DualSynch</span> <span class="n">ds</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DualSynch</span><span class="o">();</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">Thread</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">ds</span><span class="o">.</span><span class="na">f</span><span class="o">();</span>
</span><span class='line'>          <span class="o">};</span>
</span><span class='line'>      <span class="o">}.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>      <span class="n">ds</span><span class="o">.</span><span class="na">g</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>线程本地存储</h4>

<p>防止任务在共享资源上产生冲突的第二种方式就是根除对变量的共享。可以使用java.lang.ThreadLocal</p>

<h3>终结线程（任务）</h3>

<p>可以使用Thread类的interrupt()方法来终止一个阻塞的线程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Java编程思想》读书笔记之多线程(一)]]></title>
    <link href="http://rongyi.work/blog/2015/06/15/javaThread/"/>
    <updated>2015-06-15T09:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/06/15/javaThread</id>
    <content type="html"><![CDATA[<h2>线程状态</h2>

<p>new->runnable->running->block->dead<!--more--></p>

<ol>
<li>新建(new)：新创建了一个线程对象。</li>
<li>可运行(runnable)：线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。</li>
<li>运行(running)：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码。</li>
<li>阻塞(block)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：

<ol type="a">
<li>等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>
<li>同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>
<li>其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>
</ol>
</li>
<li>死亡(dead)：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。</li>
</ol>


<h2>yield()方法</h2>

<p>在run方法中对静态方法<code>Thread.yield()</code>的调用是对线程调度器（Java线程机制的一部分，可以将cpu丛一个线程转移到另一个线程）的一种建议，它在声明：“我已经执行完声明周期中最重要的部分了，此刻正是切换给其他任务执行一段是 jain的大好时机。”。</p>

<h2>如何创建线程</h2>

<ol>
<li>实现Runnable接口，并将其传入Thread的构造函数，其中run方法中负责执行任务；</li>
<li>继承Thread类。</li>
</ol>


<h2>使用Executors</h2>

<p>Java SE5的java.util.concurrent包中的Executors将为你管理Thread对象，丛而简化了并发编程。 <br/>
Executors提供了一系列工厂方法用于创先线程池，返回的线程池都实现了ExecutorService接口。</p>

<ol>
<li>public static ExecutorService newFixedThreadPool(int nThreads) <br/>
 创建固定数目线程的线程池。</li>
<li>public static ExecutorService newCachedThreadPool() <br/>
 创建一个可缓存的线程池，调用execute将重用以前构造的线程（如果线程可用）。如果现有线程没有可用的，则创建一个新线   程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</li>
<li>public static ExecutorService newSingleThreadExecutor()  <br/>
 创建一个单线程化的Executor。</li>
<li>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)  <br/>
 创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</li>
</ol>


<h2>从任务中返回值</h2>

<p>使用Callable接口代替Runnable接口，其call()中为任务代码，且会返回执行结果。但必须使用ExecutorService.submit()方法调用它。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskWithResult</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;{</span>   
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">TaskWithResult</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="s">&quot;result of TaskWithResult &quot;</span><span class="o">+</span><span class="n">id</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CallableDemo</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//从任务中返回值：Callable,call(),submit()</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">ExecutorService</span> <span class="n">exec</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>
</span><span class='line'>      <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">results</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">exec</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="nf">TaskWithResult</span><span class="o">(</span><span class="n">i</span><span class="o">)));</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nl">fs:</span> <span class="n">results</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">fs</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>              <span class="k">return</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>  <span class="k">catch</span><span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">exec</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>休眠（sleep）与等待（wait）</h2>

<p>sleep：使线程进入休眠，但不放弃对象的锁。Java SE5引入了更加显式的sleep()版本：<code>TimeUnit.MILLSESECONDS.sleep(100)</code>。sleep行为本身可以被中断，因此需要捕获InterruptedException异常。<br/>
wait：使线程进入阻塞且放弃锁。必须使用notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程。</p>

<h2>join方法</h2>

<blockquote><p>join() method suspends the execution of the calling thread until the object called finishes its execution.
也就是说，t.join()方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。<br/>
注意，对join()方法的调用可以被中断，做法是在调用线程上调用interrupt()方法，这时需要用到try-catch子句。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Sleeper</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">duration</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Sleeper</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">sleepTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>      <span class="n">duration</span> <span class="o">=</span> <span class="n">sleepTime</span><span class="o">;</span>
</span><span class='line'>      <span class="n">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sleep</span><span class="o">(</span><span class="n">duration</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; was interrupted. &quot;</span> <span class="o">+</span> <span class="s">&quot;isInterrupted(): &quot;</span> <span class="o">+</span> <span class="n">isInterrupted</span><span class="o">());</span>
</span><span class='line'>          <span class="k">return</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; has awakened&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Joiner</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Sleeper</span> <span class="n">sleeper</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Joiner</span> <span class="o">(</span><span class="n">String</span> <span class="n">name</span> <span class="o">,</span><span class="n">Sleeper</span> <span class="n">sleeper</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">sleeper</span> <span class="o">=</span> <span class="n">sleeper</span><span class="o">;</span>
</span><span class='line'>      <span class="n">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">sleeper</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Interrupted&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getName</span><span class="o">()+</span><span class="s">&quot; join completed&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Joining</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Sleeper</span> <span class="n">sleepy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Sleeper</span><span class="o">(</span><span class="s">&quot;Sleepy&quot;</span><span class="o">,</span><span class="mi">1500</span><span class="o">),</span>
</span><span class='line'>              <span class="n">grumpy</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Sleeper</span><span class="o">(</span><span class="s">&quot;Grumpy&quot;</span><span class="o">,</span><span class="mi">1500</span><span class="o">);</span>
</span><span class='line'>      <span class="n">Joiner</span> <span class="n">dopey</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Joiner</span><span class="o">(</span><span class="s">&quot;Dopey&quot;</span><span class="o">,</span><span class="n">sleepy</span><span class="o">),</span>
</span><span class='line'>              <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Joiner</span><span class="o">(</span><span class="s">&quot;Doc&quot;</span><span class="o">,</span><span class="n">grumpy</span><span class="o">);</span>
</span><span class='line'>      <span class="n">grumpy</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Grumpy</span> <span class="n">was</span> <span class="n">interrupted</span><span class="o">.</span> <span class="nf">isInterrupted</span><span class="o">():</span> <span class="kc">false</span>
</span><span class='line'><span class="n">Doc</span> <span class="n">join</span> <span class="n">completed</span>
</span><span class='line'><span class="n">Sleepy</span> <span class="n">has</span> <span class="n">awakened</span>
</span><span class='line'><span class="n">Dopey</span> <span class="n">join</span> <span class="n">completed</span>
</span></code></pre></td></tr></table></div></figure>


<h2>处理线程中的异常</h2>

<p>Thread的run方法是不抛出任何检查型异常(checked exception)的,但是它自身却可能因为一个异常而被终止，导致这个线程的终结。即异常不能跨线程传播回main()，所以必须在本地处理所有在线程内部产生的异常。  <br/>
所以要处理线程的异常有两个方法：</p>

<ol>
<li>在run中加入try&hellip;catch</li>
<li>给每个thread统一传入一个Thread.UncaughtExceptionHandler对象
但麻烦的是，在线程中抛出的异常即使使用try&hellip;catch也无法截获，因此可能导致一些问题出现，比如异常的时候无法回收一些系统资源，或者没有关闭当前的连接等等。</li>
</ol>


<p>推荐使用Thread.UncaughtExceptionHandler对象，原因有：</p>

<ol>
<li>Thread.UncaughtExceptionHandler统一管理一类Thread更方便，使用try&hellip;catch必须对每个run方法中都进行try&hellip;catch，很容易忘记一些事情。</li>
<li>try&hellip;catch很容易将正常情况下的InterruptedException也捕获了。</li>
</ol>


<p>下面的代码不捕获异常，导致程序在碰到异常后停止，executor没有退出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunnableBlog</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; -&gt; &quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;game over&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;exit&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>下面的代码捕获异常（两种方式），使得程序能按照预定的情况一直执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunnableBlog2</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; -&gt; &quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;game over&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;exit&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>UncaughtExceptionHandler方式：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunnableBlog3</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ExecutionException</span><span class="o">,</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ScheduledExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newSingleThreadScheduledExecutor</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; -&gt; &quot;</span> <span class="o">+</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">&quot;game over&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RuntimeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">t</span><span class="o">.</span><span class="na">getUncaughtExceptionHandler</span><span class="o">().</span><span class="na">uncaughtException</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">},</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1000</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;exit&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">executor</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[leetcode之two sum]]></title>
    <link href="http://rongyi.work/blog/2015/05/22/leetcodeTwosum/"/>
    <updated>2015-05-22T16:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/05/22/leetcodeTwosum</id>
    <content type="html"><![CDATA[<h2>问题描述</h2>

<p><a href="https://leetcode.com/problems/two-sum/">two sum原题链接</a></p>

<blockquote><p>Given an array of integers, find two numbers such that they add up to a specific target number.<!--more--></p>

<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>

<p>You may assume that each input would have exactly one solution.</p>

<p>Input: numbers={2, 7, 11, 15}, target=9
Output: index1=1, index2=2</p></blockquote>

<h2>简要说明</h2>

<p>给定一个int型数组和一个目标数字，从数组中找到两个数字之和为目标数字，返回这两个数字的索引，要求索引从1开始，且第一个小于第二个。如输入：numbers={2, 7, 11, 15}, target=9。只能返回1，2。返回0，1或者2，1都是错的。</p>

<h2>思路</h2>

<h3>1、两个循环</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">twoSum</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numsSize</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numsSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>时间复杂度是n<sup>2</sup>，提交之后告诉我超时。。。不通过。</p>

<h3>2、先快速排序，再二分查找</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">intWithIndex</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">intWithIndex</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">nums</span><span class="p">,</span><span class="kt">int</span> <span class="n">numsSize</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">intWithIndex</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">intWithIndex</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">intWithIndex</span><span class="p">)</span><span class="o">*</span><span class="n">numsSize</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numsSize</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">y</span><span class="p">)</span><span class="c1">//使用指针传递地址</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">=*</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span><span class="o">=*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="k">struct</span> <span class="n">intWithIndex</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span><span class="kt">int</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">intWithIndex</span> <span class="n">x</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">.</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span><span class="c1">// 从右向左找第一个小于x的数</span>
</span><span class='line'>                <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">.</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span><span class="c1">// 从左向右找第一个大于等于x的数</span>
</span><span class='line'>                <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="n">quick_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">quick_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">binary_search</span><span class="p">(</span><span class="k">struct</span> <span class="n">intWithIndex</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">left</span><span class="p">,</span><span class="kt">int</span> <span class="n">right</span><span class="p">,</span><span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">==</span> <span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="p">].</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="p">].</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">binary_search</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">target</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="p">].</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">binary_search</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">target</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span><span class="o">*</span> <span class="nf">twoSum</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numsSize</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">struct</span> <span class="n">intWithIndex</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">numsSize</span><span class="p">);</span>
</span><span class='line'>    <span class="n">quick_sort</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">numsSize</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numsSize</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">intWithIndex</span> <span class="n">a</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">bIndex</span> <span class="o">=</span> <span class="n">binary_search</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">numsSize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">target</span> <span class="o">-</span> <span class="n">a</span><span class="p">.</span><span class="n">val</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">bIndex</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">.</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">bIndex</span><span class="p">].</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>时间复杂度为nlogn，提交通过。</p>

<h3>3、先快速排序，再使用两个数字之和的特性来查找</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">intWithIndex</span><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">val</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">intWithIndex</span><span class="o">*</span> <span class="nf">create</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">nums</span><span class="p">,</span><span class="kt">int</span> <span class="n">numsSize</span><span class="p">){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">intWithIndex</span><span class="o">*</span> <span class="n">data</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">intWithIndex</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">intWithIndex</span><span class="p">)</span><span class="o">*</span><span class="n">numsSize</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">numsSize</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">index</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">y</span><span class="p">)</span><span class="c1">//使用指针传递地址</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">=*</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span><span class="o">=*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="k">struct</span> <span class="n">intWithIndex</span><span class="o">*</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span><span class="kt">int</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="n">right</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">intWithIndex</span> <span class="n">x</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">val</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">.</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span><span class="c1">// 从右向左找第一个小于x的数</span>
</span><span class='line'>                <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">val</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">.</span><span class="n">val</span><span class="p">)</span> <span class="p">{</span><span class="c1">// 从左向右找第一个大于等于x的数</span>
</span><span class='line'>                <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="n">quick_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">quick_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="nf">twoSum</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">nums</span><span class="p">,</span><span class="kt">int</span> <span class="n">numsSize</span><span class="p">,</span><span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">intWithIndex</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span><span class="n">numsSize</span><span class="p">);</span>
</span><span class='line'>    <span class="n">quick_sort</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">numsSize</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">right</span> <span class="o">=</span> <span class="n">numsSize</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">left</span><span class="p">].</span><span class="n">val</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="n">right</span><span class="p">].</span><span class="n">val</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">left</span><span class="p">].</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">right</span><span class="p">].</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmp</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">tmp</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">data</span><span class="p">[</span><span class="n">left</span><span class="p">].</span><span class="n">val</span> <span class="o">+</span> <span class="n">data</span><span class="p">[</span><span class="n">right</span><span class="p">].</span><span class="n">val</span> <span class="o">&gt;</span> <span class="n">target</span> <span class="o">?</span> <span class="n">right</span><span class="o">--</span> <span class="o">:</span> <span class="n">left</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>时间复杂度也为nlogn，提交通过。</p>

<h3>4、使用map强制搜索</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">twoSum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span><span class="o">[]</span> <span class="n">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</span><span class='line'>      <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">tmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              <span class="n">tmp</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">target</span> <span class="o">-</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>              <span class="k">if</span> <span class="o">(</span><span class="n">tmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">tmp</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">tmp0</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>                  <span class="n">tmp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>                  <span class="n">tmp</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp0</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="k">break</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="n">tmp</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>时间复杂度为n，提交通过。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySql分区调研笔记]]></title>
    <link href="http://rongyi.work/blog/2015/05/12/MySqlPartitions/"/>
    <updated>2015-05-12T16:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/05/12/MySqlPartitions</id>
    <content type="html"><![CDATA[<h2>先介绍索引分类</h2>

<h3>key</h3>

<p>通常是index的同义词</p>

<h3>index</h3>

<p>索引，同key</p>

<h3>primary key</h3>

<p>主键，也是unique key（即unique index）。每个表只能有一个。</p>

<h3>unique key</h3>

<p>即唯一索引，每个表可以有多个。<!--more--></p>

<h3>unique index</h3>

<p>即唯一索引，同unique key</p>

<h2>MySQL分区简介<a href="http://breezey.blog.51cto.com/2400275/1568014">转载自文章：MySQL分区</a></h2>

<p>当mysql一张数据表中的数据达到一定的量时，在其中查询某一个数据，需要花费大量的时间。为了避免这种查询的等待，可以对一张大的数据表做拆分。将其拆分成多张小的数据表。可以基于<strong>物理的拆分</strong>，将一张表拆分成多张小表，分别存放于不同的服务器上，以分散对mysql服务器的写的压力。也可以基于<strong>逻辑的拆分</strong>，将一张表存放到不同的区块或磁盘上，以提高mysql的读写性能。</p>

<p>mysql数据拆分基于拆分方式的不同，又分为<strong>水平拆分</strong>和<strong>垂直拆分</strong>，水平拆分也叫基于行的拆分，它不改变表结构，只是把多行数据分成多个表来进行存放，每个表只存放其中一部分行的数据。垂直拆分也叫基于列的拆分，它是将一张表中的多个列分开，拆分后的每张表只存放一部分列。</p>

<p>mysql分区是一种基于<strong>逻辑</strong>的<strong>水平拆分</strong>的方式。</p>

<h2>MySQL分区类型</h2>

<p>这里只简单介绍下，详细可以看<a href="http://dev.mysql.com/doc/refman/5.7/en/partitioning-types.html">官方文档</a></p>

<h3>RANGE Partitioning</h3>

<p>根据某个字段的范围来分区，如时间</p>

<h3>LIST Partitioning</h3>

<p>类似RANGE Partitioning，但不是根据范围，而是一个预设的list来分区</p>

<h3>COLUMNS Partitioning</h3>

<p>类似RANGE Partitioning，不过是针对多个列的范围来分区</p>

<h3>HASH Partitioning</h3>

<p>HASH分区主要用来确保数据在预先确定数目的分区中平均分布，你所要做的只是基于将要被哈希的列值指定一个列值或表达式，以 及指定被分区的表将要被分割成的分区数量。</p>

<h3>KEY Partitioning</h3>

<p>按照KEY进行分区类似于按照HASH分区，除了HASH分区使用的用户定义的表达式，而KEY分区的哈希函数是由MySQL 服务器提供。</p>

<h3>Subpartitioning</h3>

<p>也被称之为子分区。是分区表中每个分区的再次分割，子分区既可以使用HASH希分区，也可以使用KEY分区。</p>

<h2>详细说下分区限制</h2>

<p>这里只简单介绍下，详细可以看<a href="http://dev.mysql.com/doc/refman/5.6/en/partitioning-limitations-partitioning-keys-unique-keys.html">官方文档</a>
先说结论：</p>

<blockquote><blockquote><p>The rule governing this relationship can be expressed as follows: All columns used in the partitioning expression for a partitioned table must be part of every unique key that the table may have.   <br/>
In other words, every unique key on the table must use every column in the table&rsquo;s partitioning expression. (This also includes the table&rsquo;s primary key, since it is by definition a unique key. This particular case is discussed later in this section.) s</p></blockquote></blockquote>

<p>即：<strong>不能对每个UNIQUE KEY都包括的字段之外的字段进行分区</strong></p>

<h2>其他</h2>

<h3>分区对SQL语句透明</h3>

<h3>可以通过<code>SHOW PLUGINS</code>来看使用的MySql版本是否支持分区</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> partition                   | ACTIVE | STORAGE ENGINE     | NULL    | GPL</span></code></pre></td></tr></table></div></figure>


<h3>查看某个表的数据在各个分区的分布</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">PARTITION_NAME</span><span class="p">,</span><span class="n">TABLE_ROWS</span>  <span class="k">FROM</span> <span class="n">INFORMATION_SCHEMA</span><span class="p">.</span><span class="n">PARTITIONS</span>  <span class="k">WHERE</span> <span class="k">TABLE_NAME</span> <span class="o">=</span> <span class="s1">&#39;user&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于分区的使用，查询等这里不做介绍了（不符合项目需求，没有使用，所以就不多说了～）。想仔细理解可以看看<a href="http://dev.mysql.com/doc/refman/5.7/en/partitioning.html">官方的文档</a></p>

<h2>疑问</h2>

<p>话说mysql的分区限制这么死，你们都怎么用的？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Java编程思想》读书笔记之容器(二)]]></title>
    <link href="http://rongyi.work/blog/2015/05/07/javacontainer2/"/>
    <updated>2015-05-07T17:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/05/07/javacontainer2</id>
    <content type="html"><![CDATA[<h2>理解Map</h2>

<p>映射表（也称关联数组）的基本思想是它维护的键-值对关联，因此你可以使用键来查找值。标准的Java类库中包含了Map的几种基本实现，包括：HashMap,TreeMap,LinkedHashMap,WeakHashMap,ConcurrentHashMap,IdentiyHashMap.它们都有同样的基本接口Map，但是行为特性各不相同，这表现在效率、键值对的保存及呈现次序、对象的保存周期
映射表如何在多线程程序中和判定“键”等价的策略等方面。<!--more--></p>

<h3>性能</h3>

<p>性能是映射表中的一个重要问题，当在get中使用线性搜索时，执行速度会相当的慢，而这正是HashMap提高速度的地方。HashMap使用散列码，来取代对键的缓慢搜索。</p>

<h4>散列码</h4>

<p>散列码是“相对唯一”的、用以代表对象的int的值，它是通过将该对象的某些信息进行反转换而生成的。hasCode()是根类Object的方法，因此所有Java对象都能产生散列码。HashMap就是使用对象的hashCode()进行快速查询的，此方法能够显著提高性能。  <br/>
对Map中使用的键的要求与对Set中的元素的要求一样。任何键都必须具有一个equals()方法；如果键被用于散列Map，那么它必须还具有恰当的hashCode()方法；如果键被用于TreeMap，那么它必须实现Comparable。</p>

<h3>散列与散列码</h3>

<p>如果要创建用作HashMap的键（即key）的类，必须要实现自己的equals()和hashCode()方法。hashCode()应基于key的内容生成，且速度要够快。如String的hashCode()方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《Java编程思想》读书笔记之容器(一)]]></title>
    <link href="http://rongyi.work/blog/2015/04/26/javacontainer1/"/>
    <updated>2015-04-26T17:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/04/26/javacontainer1</id>
    <content type="html"><![CDATA[<h1>先上容器的类图<!--more--></h1>

<p><img src="http://rongyi.work/images/container/container.png"></p>

<p>点线框表示接口；实线框表示普通类（具体类）；虚线框表示抽象类；带有空心箭头的点线表示一个特定的类实现了一个接口；实心箭头表示某个类可以生成箭头所指向类的对象。例如任意的Collection可以生成Iterator，而List可以生成ListIterator（也能生成普通的Iterator，因为List继承自Collection）。</p>

<h4>1) Collection</h4>

<p>一个独立元素的序列，其中List按照元素的插入顺序保存元素，而set不能有重复元素，Queue按照先进先出（FIFO）的方式来管理数据，Stack按照后进先出（LIFO）的顺序管理数据。</p>

<h4>2) Map</h4>

<p>一组键值对（key-value）对象的序列，可以使用key来查找value，其中key是不可以重复的，value可以重复。我们可以称其为字典或者关联数组。其中HashMap是无序的，TreeMap是有序的，WeakHashMap是弱类型的，Hashtable是线程安全的。</p>

<h2>在容器中使用范型可以使容器类型安全。</h2>

<p>通过使用范型，可以在编译期防止将错误类型的对象放置到容器中。</p>

<h2>添加一组元素</h2>

<p>工具类#Arrays#,#Collections#中有很多实用方法。 <br/>
Arrays工具类提供的#Arrays.asList#：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">asList</span><span class="o">(</span><span class="n">T</span><span class="o">...</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">a</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Collections工具类提供的#Collections.addAll#：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">boolean</span> <span class="nf">addAll</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">,</span> <span class="n">T</span><span class="o">...</span> <span class="n">elements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">result</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">T</span> <span class="n">element</span> <span class="o">:</span> <span class="n">elements</span><span class="o">)</span>
</span><span class='line'>            <span class="n">result</span> <span class="o">|=</span> <span class="n">c</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>各个具体容器提供的#Collection.addAll#：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="nf">addAll</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">E</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>容器的打印</h2>

<p>打印数组必须使用#Arrays.toString()#来产生数组的可打印表示。但是容器的打印无需任何帮助。</p>

<h2>List</h2>

<h4>ArrayList</h4>

<p>擅长随机访问元素，但是在List中间插入喝移除元素较慢。</p>

<h4>LinkedList</h4>

<p>它通过代价较低的在List中间进行的插入和删除操作，提供了优化的顺序访问。LinkedList在随机访问方面相对较慢。但是它的特性集较ArrayList更大。</p>

<h2>迭代器Iterator</h2>

<p>不需知道容器类型，就能使用容器。这正是迭代器（一个具体类，也是一种设计模式）的作用。</p>

<h4>Iterator：只能单向移动</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="n">list1</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span><span class="s">&quot;b&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">list1</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">it</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ListIterator：能双向移动，能替换元素，且在创建时可以指定元素index</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="n">list1</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span><span class="s">&quot;b&quot;</span><span class="o">,</span><span class="s">&quot;c&quot;</span><span class="o">));</span>
</span><span class='line'>  <span class="n">ListIterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">lit</span> <span class="o">=</span> <span class="n">list1</span><span class="o">.</span><span class="na">listIterator</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">lit</span><span class="o">.</span><span class="na">hasPrevious</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">lit</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>LinkedList</h2>

<p>和ArrayList一样实现了基本的List接口，但是它执行某些操作（如插入删除）比ArrayList更加高效，但随机访问稍微逊色。</p>

<h2>Statck</h2>

<p>是先进后出（FILO）的容器。LinkedList具有能够实现栈的所有功能的方法，因此可以直接将LinkedList作为Stack使用。</p>

<h2>Queue</h2>

<p>是先进先出（FIFO）的容器。LinkedList具有能够实现栈的所有功能的方法，因此可以直接将LinkedList作为Queue使用。</p>

<h2>Set</h2>

<p>不能有重复元素。有两种实现：#HashSet#访问速度快，#TreeSet#是有序的。</p>

<h2>Map</h2>

<p>有两种实现：#HashMap#;#TreeMap#</p>

<h2>Collection接口与Iterator</h2>

<p>Collection是所有序列容器的共性接口，它可能被认为是一个“附属接口”，即因为要表示其他若干个接口的共性而出现的接口。另外，java.util.AbstractCollection提供了Collection的默认实现。它可以使得你创建AbstractCollection的子类，从而避免了不必要的代码重复（相比直接实现Collection）。  <br/>
但另外一点，C++中容器共性并不是由基类来保持，而是迭代器。当要实现一个不是Collection的外部类时，让它去实现Collection时非常麻烦和困难，因此使用Iterator就是一个好的选择。且有时Iterator的代码更少。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created: yirongyi@2015年4月26日 下午6:09:01</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">edgar</span><span class="o">.</span><span class="na">chapter11</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">Sequence</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">String</span><span class="o">[]</span> <span class="n">strs</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;a&quot;</span><span class="o">,</span><span class="s">&quot;b&quot;</span><span class="o">,</span><span class="s">&quot;c&quot;</span><span class="o">};</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NonCollectionSequence</span> <span class="kd">extends</span> <span class="n">Sequence</span><span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(){</span>
</span><span class='line'>          <span class="kd">private</span> <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">strs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="nd">@Override</span>
</span><span class='line'>          <span class="kd">public</span> <span class="n">String</span> <span class="nf">next</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">strs</span><span class="o">[</span><span class="n">index</span><span class="o">++];</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>          <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          
</span><span class='line'>      <span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * @param args</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">NonCollectionSequence</span> <span class="n">ncs</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">NonCollectionSequence</span><span class="o">();</span>
</span><span class='line'>      <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">it</span> <span class="o">=</span> <span class="n">ncs</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'>      <span class="k">while</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>foreach与迭代器（Iterator）</h2>

<p>foreach可以使用在数组中，同时也能使用在任何的Collection对象中（Map不行）。因为Collection的实现类都实现了Iterator接口，该接口拥有一个产生Iterator的iterator()方法，且Ieterator接口被foreach用来在序列中移动。因此任何实现了Itreator接口的类都可以使用foreach。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySql索引的使用笔记]]></title>
    <link href="http://rongyi.work/blog/2015/04/20/mysqlIndex/"/>
    <updated>2015-04-20T17:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/04/20/mysqlIndex</id>
    <content type="html"><![CDATA[<h2>什么是数据库索引？</h2>

<p>数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。</p>

<h2>MySql中索引使用的数据结构？</h2>

<p>BTree。MyISAM引擎使用B+Tree作为索引结构；InnoDB存储引擎也使用B+Tree作为索引结构，但两者的具体实现方式不同，具体见<a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></p>

<h2>什么是聚集索引和非聚集索引？</h2>

<p>数据记录本身被存于索引<!--more-->（一颗B+Tree）的叶子节点上，这种索引叫<strong>聚集索引</strong>，InnoDB使用聚集索引。反之则为<strong>非聚集索引</strong>，MyISAM使用非聚集索引，它的叶子节点的data域指向数据记录的地址，而不是存储数据记录本身；</p>

<h2>MySql支持聚集索引吗？</h2>

<p>MySQL有没有支持聚集索引，取决于采用哪种存储引擎。MySQL InnoDB一定会建立聚集索引。InnoDB的数据文件本身就是索引文件，且按主键聚集 <br/>
关于聚集索引还需注意： <br/>
1. 如果声声明了主键(primary key)，则这个列会被做为聚集索引。<br/>
2. 如果没有声明主键，则会用一个唯一且不为空的索引列做为主键，成为此表的聚集索引。
3. 上面二个条件都不满足，InnoDB会自己产生一个虚拟的字段作为聚集索引，这个字段长度为6个字节，类型为长整形。</p>

<h2>MySql有几种索引？</h2>

<p>普通索引；主键索引；唯一索引；联合索引；全文索引。</p>

<h2>索引特性：</h2>

<ol>
<li>B+树的性质决定：索引的字段（数据项）长度越小，树的高度越低，查询次数越少，即磁盘IO次数越少（所以尽量使用字段类型较小的字段作为索引，如尽量使用int型而不是long型字段）。</li>
<li>索引的最左匹配特性</li>
</ol>


<h2>建索引的几个原则（转自<a href="http://tech.meituan.com/mysql-index.html">MySQL索引原理及慢查询优化</a>）</h2>

<ol>
<li>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(>、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c > 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</li>
<li>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。</li>
<li>尽量选择区分度高的列作为索引,区分度（Selectivity）的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录。</li>
<li>索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</li>
<li>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</li>
<li>尽量不使用like，非要使用注意like &lsquo;%XXX'不会使用索引，而like 'XXX%'可以。</li>
<li>如果直接使用字段建索引太长，可以考虑建立前缀索引（即不直接使用整个字段，而是根据上文提到的Selectivity来使用字段的前缀）。如</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ALTER TABLE employees.employees ADD INDEX `first_name_last_name4` (first_name, last_name(4));</span></code></pre></td></tr></table></div></figure>


<h2>sql查询语句在使用索引方面的注意事项</h2>

<ol>
<li>不要在索引列上进行运算（如+，-，*，/，! 等）；</li>
<li>不要在索引列上运用函数（如avg等）；</li>
<li>不要在like语句中将百分号在前（如"%&ndash;&ldquo;）；</li>
<li>字符型字段为数字时在where条件里不添加引号；</li>
<li>当where条件中有索引字段，需要排序时尽量对索引字段进行排序；</li>
</ol>


<h2>参考文章</h2>

<ol>
<li><a href="http://tech.meituan.com/mysql-index.html">MySQL索引原理及慢查询优化</a></li>
<li><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html">MySQL索引背后的数据结构及算法原理</a></li>
<li><a href="http://www.zhdba.com/mysqlops/2011/11/24/understanding_index/">由浅入深理解索引的实现(1)</a>
<a href="http://blog.sina.com.cn/s/blog_6e322ce7010101i7.html">MYSQL索引失效的各种情形总结</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于异常的一些问答]]></title>
    <link href="http://rongyi.work/blog/2015/04/06/exception/"/>
    <updated>2015-04-06T01:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2015/04/06/exception</id>
    <content type="html"><![CDATA[<h2>1、什么叫做异常？</h2>

<p>异常处理，是编程语言或计算机硬件里的一种机制，用于处理软件或信息系统中出现的异常状况（即超出程序正常执行流程的某些特殊条件）。</p>

<h2>2、Java中关于异常／错误怎么理解？</h2>

<p>Java的基本理念是：“结构不佳的代码不能运行”。 <br/>
发现错误的最佳时机是在编译阶段。但编译期间不能找出所有的错误，余下的错误只能在运行期解决。这就需要错误源能通过某种方式，把适当的信息传递给某个接收者（该接收者知道该如何处理这个错误）。Java使用异常来提供一致的错误报告模型。<!--more--></p>

<h2>3、Java中异常的分类？</h2>

<p>在Java中,异常分为受检查异常,与运行时异常. 两者都在异常类层次结构中.其最大的区别受检查异常是必须要捕获和处理的，否则编译期不通过，运行时异常则不需要。</p>

<h2>4、Java中的异常的类结构图？</h2>

<p><img src="http://rongyi.work/images/exception/1.jpeg" title="Diagram of Exception Hierarchy " alt="Diagram of Exception Hierarchy" />  <br/>
粉红色的是受检查的异常(checked exceptions),其必须被 try{}catch语句块所捕获,或者在方法签名里通过throws子句声明.受检查的异常必须在编译时被捕捉处理,命名为 CHecked Exception 是因为Java编译器要进行检查,Java虚拟机也要进行检查,以确保这个规则得到遵守.</p>

<p>绿色的异常是运行时异常(runtime exceptions),需要程序员自己分析代码决定是否捕获和处理,比如 空指针,被0除&hellip;。而声明为Error的，则属于严重错误,需要根据业务信息进行特殊处理,Error不需要捕捉。</p>

<h2>5、那么问题来了，RuntimeException异常为什么是非检查异常？且可以不捕获处理？</h2>

<ol>
<li>首先，Java认为RuntimeException为错误，无法解决。如除以0，空指针等。</li>
<li>其次，RuntimeException会自动被虚拟机抛出，无需在程序中再单独列出来。</li>
<li>最后，如果RuntimeException不被捕获和处理，会直达main方法，最后程序退出（程序退出前自动调用异常的printStatck方法）。</li>
</ol>


<h2>6、运行时异常（RuntimeException）不捕获也不会有编译错误，那么该何时捕获，何时不捕获？</h2>

<p>看你的需求：
1. 如果你希望发生异常后立即停止程序，就不捕获。
2. 如果你希望发生异常后还继续运行，就捕获。</p>

<h2>7、异常管理的最佳实践？</h2>

<p>如果能处理异常就捕获并处理，不能就抛出。</p>

<h2>8、异常处理流程：捕获－》处理－》清理（可选，如关闭打开的连接，文件等）</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>     <span class="o">...</span>
</span><span class='line'><span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span><span class="c1">//1、捕获异常</span>
</span><span class='line'>     <span class="c1">//2、处理异常</span>
</span><span class='line'><span class="o">}</span> <span class="n">finaly</span>  <span class="o">{</span>
</span><span class='line'>  <span class="c1">//3、最后要做的，如清理工作</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>9、Java中的方法声明为什么跟着throws XXException？</h2>

<p>这个叫做异常声明，通常我们的程序不会同源代码一同发布，这样客户程序调用我们的方法就不能知道我们的方法可能会抛出哪些异常，便不能处理了。Java为了解决这个问题，便提供了异常声明这个语法。</p>

<h2>10、为什么我的程序什么错误都没有报错(没有输出错误信息)，就直接退出了？</h2>

<p>因为你的代码没有捕获一个特定的运行时异常，且由于某些原因还导致了异常丢失(没有输出错误信息)。（如在finaly里return了，这里是个人理解和猜测，欢迎指正）。</p>

<h2>11、如何捕获所有异常，包括可能的运行时异常？</h2>

<p>捕获Exception。</p>

<h2>12、一般不要调用fillInStackTrace，这样会丢失栈信息</h2>

<p>即不要使用Exception的fillInStackTrace()方法。因为调用后，调用行就成了异常的新发地了。</p>

<h2>13、自定义异常要注意不要丢失原始异常链</h2>

<p>要将原始Exception传入自定义异常（通常通过构造器）。如：<code>throw new MyException(e,"msg");</code></p>

<h2>什么是异常限制（待续）？</h2>

<h3>参考</h3>

<ul>
<li><a href="http://book.douban.com/subject/2130190/">《Java编程思想》</a></li>
<li><a href="http://www.programcreek.com/2009/02/diagram-for-hierarchy-of-exception-classes/"> Diagram of Exception Hierarchy </a></li>
<li><a href="http://www.programcreek.com/2013/10/top-10-questions-about-java-exceptions/"> Top 10 Questions about Java Exceptions </a></li>
<li><a href="http://www.ibm.com/developerworks/cn/java/j-lo-exception-misdirection/">Java 异常处理的误区和经验总结</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jpg转png命令sips]]></title>
    <link href="http://rongyi.work/blog/2014/12/28/jpg2png/"/>
    <updated>2014-12-28T09:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/12/28/jpg2png</id>
    <content type="html"><![CDATA[<p>（很久以前的笔记了，今天提交了吧，免得下次再找）。</p>

<h2>sips介绍</h2>

<p>sips命令介绍可使用man sips命令查看。这里只记录我使用的其中转换图片格式功能的两个笔记。</p>

<h2>使用</h2>

<h3>转换单个jpg到png<!--more--></h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sips -s format png 1.jpg --out 1.png</span></code></pre></td></tr></table></div></figure>


<p>如果要转换到其他格式，请将format后的png格式改成其他，如gif。</p>

<h3>批量转换jpg到png</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for i in *.jpg;do sips -s format png $i --out png/$i.png;done</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法之希尔排序]]></title>
    <link href="http://rongyi.work/blog/2014/09/08/shellsort/"/>
    <updated>2014-09-08T18:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/09/08/shellsort</id>
    <content type="html"><![CDATA[<h3>介绍</h3>

<p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。</p>

<p>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<!--more--></p>

<ul>
<li>插入排序在对几乎已经排好序的数据操作时， 效率高， 即可以达到线性排序的效率</li>
<li>但插入排序一般来说是低效的， 因为插入排序每次只能将数据移动一位</li>
</ul>


<h3>步骤</h3>

<ol>
<li>确定步数（一般初始步数为size／2）。</li>
<li>对步数确定的子序列进行直接插入排序。</li>
<li>重复1、2步骤，直到步数为1，进行最后一次直接插入排序。</li>
</ol>


<p>注释：步长的选择是希尔排序的重要部分。 <br/>
已知的最好步长序列是由Sedgewick提出的 (1, 5, 19, 41, 109,&hellip;)，该序列的项来自 9 * 4<sup>i</sup> - 9 * 2<sup>i</sup> + 1 和 4<sup>i</sup> - 3 * 2<sup>i</sup> + 1 这两个算式[1].这项研究也表明“比较在希尔排序中是最主要的操作，而不是交换。”用这样步长序列的希尔排序比插入排序和堆排序都要快，甚至在小数组中比快速排序还快，但是在涉及大量数据时希尔排序还是比快速排序慢。</p>

<h2>实现</h2>

<h3>C语言实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  ShellSort.c</span>
</span><span class='line'><span class="c1">//  MergeSort</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Edgar on 14-9-15.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 Edgar. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print_array</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">list</span><span class="o">+</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">y</span><span class="p">)</span><span class="c1">//使用指针传递地址</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">=*</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span><span class="o">=*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">shell_sort1</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">gap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">gap</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="n">gap</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">gap</span> <span class="o">/=</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">//步长</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">gap</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>        <span class="c1">//直接插入排序</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">gap</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">gap</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">gap</span><span class="p">])</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                  <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">gap</span><span class="p">;</span>
</span><span class='line'>                  <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">a</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">gap</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>                      <span class="n">k</span> <span class="o">-=</span> <span class="n">gap</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>                  <span class="n">a</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">gap</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">shell_sort2</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">j</span><span class="p">,</span> <span class="n">gap</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">gap</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="n">gap</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">gap</span> <span class="o">/=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">gap</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="c1">//从数组第gap个元素开始</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">gap</span><span class="p">])</span><span class="c1">//每个元素与自己组内的数据进行直接插入排序</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">gap</span><span class="p">;</span>
</span><span class='line'>              <span class="k">while</span> <span class="p">(</span><span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">)</span>
</span><span class='line'>              <span class="p">{</span>
</span><span class='line'>                  <span class="n">a</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">gap</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class='line'>                  <span class="n">k</span> <span class="o">-=</span> <span class="n">gap</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="n">a</span><span class="p">[</span><span class="n">k</span> <span class="o">+</span> <span class="n">gap</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">shell_sort3</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">gap</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">gap</span> <span class="o">=</span> <span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span> <span class="n">gap</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">gap</span> <span class="o">/=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">gap</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//直接插入排序</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="n">gap</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">gap</span><span class="p">];</span> <span class="n">j</span> <span class="o">-=</span> <span class="n">gap</span><span class="p">)</span>
</span><span class='line'>              <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="n">gap</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">99</span><span class="p">,</span><span class="mi">234</span><span class="p">,</span><span class="mi">567</span><span class="p">,</span><span class="mi">7687</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">545</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">674</span><span class="p">,</span><span class="mi">232</span><span class="p">,</span><span class="mi">87</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">890</span><span class="p">};</span>
</span><span class='line'>    <span class="n">print_array</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="n">shell_sort3</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="n">print_array</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>算法分析</h2>

<ul>
<li>希尔排序的分析是一个复杂的问题，因为它的时间是所取“增量”序列的函数。这里不详细描述了。</li>
<li>稳定性：稳定</li>
</ul>


<h2>参考</h2>

<ul>
<li>维基百科：<a href="http://zh.wikipedia.org/zh/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">http://zh.wikipedia.org/zh/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F</a></li>
<li>白话经典算法系列之三 希尔排序的实现 ：<a href="http://blog.csdn.net/morewindows/article/details/6668714">http://blog.csdn.net/morewindows/article/details/6668714</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法之快速排序]]></title>
    <link href="http://rongyi.work/blog/2014/09/08/quickSort/"/>
    <updated>2014-09-08T18:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/09/08/quickSort</id>
    <content type="html"><![CDATA[<h3>介绍</h3>

<p>通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。<!--more--></p>

<p>快速排序的图解：</p>

<p><img src="http://rongyi.work/images/quicksort/1.png"></p>

<h3>步骤</h3>

<p>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。</p>

<ol>
<li>从数列中挑出一个元素，称为 &ldquo;基准"（pivot）。</li>
<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li>
<li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>


<p>解释：每次分区操作后，即左指针和右指针相等时指向的元素在最终的位置上。</p>

<p>另外<a href="http://blog.csdn.net/morewindows/article/details/6684558">白话经典算法系列之六 快速排序 快速搞定 </a>中对快速排序进行了浅显易懂的说明：</p>

<ol>
<li>挖坑填数</li>
<li>分治法</li>
</ol>


<p>对挖坑填数进行总结</p>

<ol>
<li>i =L; j = R; 将基准数挖出形成第一个坑a[i]。</li>
<li>j&ndash;由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</li>
<li>i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</li>
<li>再重复执行2，3二步，直到i==j，将基准数填入a[i]中。</li>
</ol>


<p>代码解释：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="nf">AdjustArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span> <span class="c1">//返回调整后基准数的位置</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">l</span><span class="p">];</span> <span class="c1">//s[l]即s[i]就是第一个坑</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// 从右向左找小于x的数来填s[i]</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>          <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="c1">//将s[j]填到s[i]中，s[j]就形成了一个新的坑</span>
</span><span class='line'>          <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// 从左向右找大于或等于x的数来填s[j]</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">)</span>
</span><span class='line'>          <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="c1">//将s[i]填到s[j]中，s[i]就形成了一个新的坑</span>
</span><span class='line'>          <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">//退出时，i等于j。将x填到这个坑中。</span>
</span><span class='line'>  <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>分治法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">quick_sort1</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">AdjustArray</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span><span class="c1">//先成挖坑填数法调整s[]</span>
</span><span class='line'>      <span class="n">quick_sort1</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 递归调用 </span>
</span><span class='line'>      <span class="n">quick_sort1</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>将两者合并即为完整的实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//快速排序</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">l</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="c1">//Swap(s[l], s[(l + r) / 2]); //将中间的这个数和第一个数交换 参见注1</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">l</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">r</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">)</span> <span class="c1">// 从右向左找第一个小于x的数</span>
</span><span class='line'>              <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>              <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>          
</span><span class='line'>            <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">)</span> <span class="c1">// 从左向右找第一个大于等于x的数</span>
</span><span class='line'>              <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span>
</span><span class='line'>              <span class="n">s</span><span class="p">[</span><span class="n">j</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="n">quick_sort</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 递归调用 </span>
</span><span class='line'>        <span class="n">quick_sort</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>实现</h3>

<h3>C实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  QuickSort.c</span>
</span><span class='line'><span class="c1">//  MergeSort</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Edgar on 14-9-15.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 Edgar. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print_array</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">list</span><span class="o">+</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">quick_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span><span class="kt">int</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">left</span><span class="p">,</span><span class="n">j</span> <span class="o">=</span> <span class="n">right</span><span class="p">,</span><span class="n">x</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span><span class="c1">// 从右向左找第一个小于x的数</span>
</span><span class='line'>                <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span><span class="c1">// 从左向右找第一个大于等于x的数</span>
</span><span class='line'>                <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">--</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>        <span class="n">quick_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">quick_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">99</span><span class="p">,</span><span class="mi">234</span><span class="p">,</span><span class="mi">567</span><span class="p">,</span><span class="mi">7687</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">545</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">674</span><span class="p">,</span><span class="mi">232</span><span class="p">,</span><span class="mi">87</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">890</span><span class="p">};</span>
</span><span class='line'>    <span class="n">print_array</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="n">quick_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,(</span><span class="mi">13</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="n">print_array</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>算法分析</h3>

<ul>
<li>时间复杂度：平均Ο(nlogn)</li>
<li>空间复杂度：Ω(n)（依据版本）</li>
<li>稳定性：原地分区版本的快速排序算法是不稳定的。</li>
</ul>


<h3>参考文章</h3>

<p>维基百科：<a href="http://en.wikipedia.org/wiki/Quicksort">http://en.wikipedia.org/wiki/Quicksort</a>   <br/>
白话经典算法系列之六 快速排序 快速搞定：<a href="http://blog.csdn.net/morewindows/article/details/6684558">http://blog.csdn.net/morewindows/article/details/6684558</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法之插入排序]]></title>
    <link href="http://rongyi.work/blog/2014/09/08/insertsort/"/>
    <updated>2014-09-08T18:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/09/08/insertsort</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>插入排序（Insertion Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序，详情见<a href="http://zh.wikipedia.org/zh/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地算法</a>），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。<!--more-->　</p>

<h3>步骤</h3>

<p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>

<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>


<p>或者第三个步骤换成交换两个元素。具体算法描述如下：</p>

<ol>
<li>从第一个元素开始，该元素可以认为已经被排序</li>
<li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li>
<li>如果该元素（已排序）大于新元素，则交换这两个元素</li>
<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li>
<li>将新元素插入到该位置后</li>
<li>重复步骤2~5</li>
</ol>


<p>如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的数目。该算法可以认为是插入排序的一个变种，称为二分查找排序。</p>

<h3>C实现</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  InsertSort.c</span>
</span><span class='line'><span class="c1">//  MergeSort</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Edgar on 14-9-11.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 Edgar. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print_array</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">list</span><span class="o">+</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">y</span><span class="p">)</span><span class="c1">//使用指针传递地址</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">=*</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span><span class="o">=*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">insert_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span><span class="k">const</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">tmp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//交换显示代码更简洁</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">insert_sort3</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span> <span class="n">j</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>            <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">99</span><span class="p">,</span><span class="mi">234</span><span class="p">,</span><span class="mi">567</span><span class="p">,</span><span class="mi">7687</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">545</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">674</span><span class="p">,</span><span class="mi">232</span><span class="p">,</span><span class="mi">87</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">890</span><span class="p">};</span>
</span><span class='line'>    <span class="n">print_array</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="n">insert_sort3</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="n">print_array</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>算法分析</h3>

<ul>
<li>时间复杂度：最好：O(n)，最坏O(n<sup>2</sup>)。平均O(n<sup>2</sup>)</li>
<li>空间复杂度：O(1)</li>
<li>稳定性：稳定。</li>
</ul>


<p>如果目标是把n个元素的序列升序排列，那么采用插入排序存在最好情况和最坏情况。最好情况就是，序列已经是升序排列了，在这种情况下，需要进行的比较操作需(n-1)次即可。最坏情况就是，序列是降序排列，那么此时需要进行的比较共有n(n-1)/2次。插入排序的赋值操作是比较操作的次数减去(n-1)次。平均来说插入排序算法复杂度为O(n<sup>2</sup>)。因而，插入排序不适合对于数据量比较大的排序应用。但是，如果需要排序的数据量很小，例如，量级小于千，那么插入排序还是一个不错的选择。 插入排序在工业级库中也有着广泛的应用，在STL的sort算法和stdlib的qsort算法中，都将插入排序作为快速排序的补充，用于少量元素的排序（通常为8个或以下）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法之冒泡排序]]></title>
    <link href="http://rongyi.work/blog/2014/09/08/bubblesort/"/>
    <updated>2014-09-08T18:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/09/08/bubblesort</id>
    <content type="html"><![CDATA[<h3>介绍</h3>

<p>冒泡排序的原理可以顾名思义：把每个数据看成一个气泡，按初始顺序自底向上依次对两两气泡进行比较，对上重下轻的气泡交换顺序（这里用气泡轻、重表示数据大、小），保证轻的气泡总能浮在重的气泡上面，直到最轻的气泡浮到最上面；保持最后浮出的气泡不变，对余下气泡循环上述步骤，直到所有气泡从轻到重排列完毕。<!--more--></p>

<p>冒泡排序的图解：</p>

<p><img src="http://rongyi.work/images/bubblesort/1.gif"></p>

<h3>步骤</h3>

<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>
</ol>


<h3>算法分析</h3>

<ul>
<li>时间复杂度：最好：O(n)，最坏O(n<sup>2</sup>)。平均O(n<sup>2</sup>)</li>
<li>空间复杂度：O(1)</li>
<li>稳定性：稳定。</li>
</ul>


<h3>实现</h3>

<h4>C语言实现</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  BubbleSort.c</span>
</span><span class='line'><span class="c1">//  MergeSort</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Edgar on 14-9-15.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 Edgar. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">print_array</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">list</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">list</span><span class="o">+</span><span class="n">i</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="o">*</span><span class="n">y</span><span class="p">)</span><span class="c1">//使用指针传递地址</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>    <span class="n">temp</span><span class="o">=*</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">x</span><span class="o">=*</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">y</span><span class="o">=</span><span class="n">temp</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">//这个不易读</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">void bubble_sort(int a[], int size)</span>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm"> int i,j;</span>
</span><span class='line'><span class="cm">    for (i = size; i &gt; 1; i--) {</span>
</span><span class='line'><span class="cm">        for (j = 0; j &lt; i-1; j++) {</span>
</span><span class='line'><span class="cm">            if (a[j] &gt; a[j+1])</span>
</span><span class='line'><span class="cm">                swap(&amp;a[j], &amp;a[j+1]);</span>
</span><span class='line'><span class="cm">        }</span>
</span><span class='line'><span class="cm">        </span>
</span><span class='line'><span class="cm">    }</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">}*/</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">bubble_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">-</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class='line'>                <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">99</span><span class="p">,</span><span class="mi">234</span><span class="p">,</span><span class="mi">567</span><span class="p">,</span><span class="mi">7687</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">545</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">674</span><span class="p">,</span><span class="mi">232</span><span class="p">,</span><span class="mi">87</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">890</span><span class="p">};</span>
</span><span class='line'>    <span class="n">print_array</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="n">bubble_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="n">print_array</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">13</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考</h3>

<p>维基百科： <a href="http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">http://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[算法之归并排序]]></title>
    <link href="http://rongyi.work/blog/2014/09/07/mergesort/"/>
    <updated>2014-09-07T18:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/09/07/mergesort</id>
    <content type="html"><![CDATA[<h3>前言</h3>

<p>归并排序由<a href="http://en.wikipedia.org/wiki/John_von_Neumann">John von Neumann（约翰·冯·诺伊曼）</a>发明于1945年。 <br/>
归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。是一种稳定排序方法。<!--more-->    <br/>
图解归并排序：</p>

<p><img src="http://rongyi.work/images/mergesort/1.gif"></p>

<h3>开始之前</h3>

<p>首先需要了解一个概念：<a href="http://zh.wikipedia.org/wiki/%E5%88%86%E6%B2%BB%E6%B3%95">分治法</a></p>

<blockquote><p>在计算机科学中，分治法是建基于多项分支递归的一种很重要的算法范式。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。 <br/>
这个技巧是很多高效算法的基础，如排序算法（快速排序、归并排序）、傅立叶变换（快速傅立叶变换）。</p></blockquote>

<h3>步骤</h3>

<p>归并排序算法步骤可以简单概括为：</p>

<ol>
<li>分：将序列等分为二</li>
<li>治：分别对两个序列递归的使用归并排序算法</li>
<li>合：每次递归中，将分开的两个部分合并成一个有序序列（归并两个有序序列）</li>
</ol>


<p>归并两个有序序列的步骤为：</p>

<ol>
<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>
<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>
<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>
<li>重复步骤3直到某一指针到达序列尾</li>
<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>
</ol>


<h3>算法分析</h3>

<ul>
<li>时间复杂度：最好：O(nlogn)，最坏O(nlogn)。平均O(nlogn)</li>
<li>空间复杂度：O(n)（需要一个大小为n的临时数组）</li>
<li>稳定性：稳定。</li>
</ul>


<h3>实现</h3>

<h4>C实现</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  main.c</span>
</span><span class='line'><span class="c1">//  MergeSort</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  Created by Edgar on 14-9-6.</span>
</span><span class='line'><span class="c1">//  Copyright (c) 2014年 Edgar. All rights reserved.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">mergeTwoArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span><span class="kt">int</span> <span class="n">sizeA</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">[],</span><span class="kt">int</span> <span class="n">sizeB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">((</span><span class="n">sizeA</span> <span class="o">+</span> <span class="n">sizeB</span><span class="p">)</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">sizeA</span><span class="o">&amp;&amp;</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">sizeB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">c</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">?</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]</span><span class="o">:</span><span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">sizeA</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">c</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">sizeB</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">c</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">sizeA</span> <span class="o">+</span> <span class="n">sizeB</span><span class="p">);</span> <span class="n">l</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">a</span><span class="p">[</span><span class="n">l</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="n">l</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">merge_sort</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[],</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">int</span> <span class="n">size1</span> <span class="o">=</span> <span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="o">*</span><span class="n">a1</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="o">*</span><span class="n">a2</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">size1</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">size2</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-</span> <span class="n">size1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">merge_sort</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span><span class="n">size1</span><span class="p">);</span>
</span><span class='line'>        <span class="n">merge_sort</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span><span class="n">size2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mergeTwoArray</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">size1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">size2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">99</span><span class="p">,</span><span class="mi">234</span><span class="p">,</span><span class="mi">567</span><span class="p">,</span><span class="mi">7687</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">545</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">674</span><span class="p">,</span><span class="mi">232</span><span class="p">,</span><span class="mi">87</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">890</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">merge_sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">13</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">//测试合并两个有序数组</span>
</span><span class='line'><span class="cm">int main(int argc, const char * argv[])</span>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">    </span>
</span><span class='line'><span class="cm">    int a[4] = {1,2,7,9};</span>
</span><span class='line'><span class="cm">    int b[6] = {6,8,23,25,67,99};</span>
</span><span class='line'><span class="cm">    mergeTwoArray(a, 4, b, 6);</span>
</span><span class='line'><span class="cm">    for (int i = 0; i &lt; 10; i++) {</span>
</span><span class='line'><span class="cm">        printf(&quot;%3d &quot;,a[i]);</span>
</span><span class='line'><span class="cm">    }</span>
</span><span class='line'><span class="cm">    return 0;</span>
</span><span class='line'><span class="cm">}*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考文章：</p>

<p><a href="http://zh.wikipedia.org/zh/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">http://zh.wikipedia.org/zh/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F</a>   <br/>
<a href="http://blog.csdn.net/morewindows/article/details/6678165">http://blog.csdn.net/morewindows/article/details/6678165</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Servlet是线程安全的吗]]></title>
    <link href="http://rongyi.work/blog/2014/09/02/servletthreadsafe/"/>
    <updated>2014-09-02T18:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/09/02/servletthreadsafe</id>
    <content type="html"><![CDATA[<h2>线程安全解释</h2>

<p>线程安全的解释有很多。
<a href="http://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">中文维基百科</a></p>

<blockquote><p>线程安全是编程中的术语，指某个函数、函数库在多线程环境中被调用时，能够正确地处理各个线程的局部变量，使程序功能正确完成。<!--more--></p></blockquote>

<p><a href="http://en.wikipedia.org/wiki/Thread_safety">英文维基百科</a></p>

<blockquote><p>Thread safety is a computer programming concept applicable in the context of multi-threaded programs. A piece of code is thread-safe if it only manipulates shared data structures in a manner that guarantees safe execution by multiple threads at the same time. There are various strategies for making thread-safe data structures.</p></blockquote>

<p>我的理解：</p>

<blockquote><p>线程安全指某块代码在被多个线程同时执行的情况下能正确执行，且能输出期望的结果。</p></blockquote>

<h2>线程不安全的原因</h2>

<p>线程安全主要是因为实例变量（声明在类中且任何方法外的属性）引起。</p>

<h2>线程不安全的解决办法</h2>

<p>先提出两个概念：<strong>有状态</strong>,<strong>无状态</strong>。 <br/>
关于这两个概念的解释见<a href="http://www.infoq.com/cn/news/2012/06/ugly-code-12">代码之丑（十二）&ndash;无状态方法，郑晔，ThoughtWorks公司首席咨询师</a>：</p>

<blockquote><p>衡量一个方法是否是有状态的，就看它是否改动了其它的东西，比如全局变量，比如实例的字段。format方法在运行过程中改动了SimpleDateFormat的calendar字段，所以，它是有状态的。</p></blockquote>

<p>所以，无状态的类，方法永远都是线程安全的。<br/>
借鉴刚才提到的那篇文章中的例子：SimpleDateFormat不是线程安全的。所以下面这样写是不对的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">DateFormat</span> <span class="n">format</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy.MM.dd&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCurrentDateText</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">format</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="nf">Date</span><span class="o">());</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>getCurrentDateText是有状态的，所以是线程不安全的。要进行改造，则需要将format这个实例变量改成局部变量。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Sample</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getCurrentDateText</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy.MM.dd&quot;</span><span class="o">).</span><span class="na">format</span><span class="o">(</span><span class="k">new</span> <span class="nf">Date</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Servlet的线程安全问题</h2>

<p>讲了这么多，那么Servlet是线程安全的吗？答案是：不安全。</p>

<h3>解释</h3>

<p>见这篇文章的解释：<a href="http://blog.csdn.net/lcore/article/details/8974590">深入理解Servlet线程安全问题 </a></p>

<h4>Servlet线程池</h4>

<p>serlvet采用多线程来处理多个请求同时访问，Tomcat容器维护了一个线程池来服务请求。线程池实际上是等待执行代码的一组线程叫做工作组线程(Worker Thread)，Tomcat容器使用一个调度线程来管理工作组线程(Dispatcher Thead)。</p>

<p>当容器收到一个Servlet请求，Dispatcher线程从线程池中选出一个工作组线程，将请求传递给该线程，然后由该线程来执行Servlet的service方法。</p>

<p>当这个线程正在执行的时候，容器收到另一个请求，调度者线程将从线程池中选出另外一个工作组线程来服务则个新的请求，容器并不关心这个请求是否访问的是同一个Servlet还是另一个Servlet。当容器收到对同一个Servlet的多个请求的时候，那这个servlet的service方法将在多线程中并发的执行。</p>

<h4>servlet线程安全问题</h4>

<p>多线程和单线程Servlet具体区别：多线程下每个线程对局部变量都会有自己的一份copy，这样对局部变量的修改只会影响到自己的copy而不会对别的线程产生影响，线程安全的。但是对于实例变量来说，由于servlet在Tomcat中是以单例模式存在的，所有的线程共享实例变量。多个线程对共享资源的访问就造成了线程不安全问题。</p>

<h4>设计线程安全的Servlet</h4>

<ol>
<li>避免使用实例变量</li>
<li>避免使用非线程安全的集合</li>
<li>在多个Servlet中对某个外部对象(例如文件)的修改是务必加锁（Synchronized，或者ReentrantLock），互斥访问。</li>
<li>属性的线程安全：ServletContext、HttpSession是线程安全的；ServletRequest是非线程安全的。</li>
</ol>


<h4>一个线程不安全的Servlet</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">edgar</span><span class="o">.</span><span class="na">servlet</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.annotation.WebServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Servlet implementation class ThreadServlet</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@WebServlet</span><span class="o">(</span><span class="s">&quot;/ThreadServlet&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * @see HttpServlet#HttpServlet()</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">ThreadServlet</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">super</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// TODO Auto-generated constructor stub</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse</span>
</span><span class='line'><span class="cm">  *      response)</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span><span class='line'>          <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">doPost</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">  * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse</span>
</span><span class='line'><span class="cm">  *      response)</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span><span class='line'>          <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="kd">synchronized</span><span class="o">(</span><span class="n">message</span><span class="o">){</span>
</span><span class='line'>          <span class="n">message</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;message&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">PrintWriter</span> <span class="n">printWriter</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span><span class='line'>          <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// TODO Auto-generated catch block</span>
</span><span class='line'>              <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="n">printWriter</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当有大量请求的时候，会出现返回的不是预期（不正确）的message。 <br/>
解决的办法就是将message设置为局部变量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone开发图片尺寸]]></title>
    <link href="http://rongyi.work/blog/2014/09/02/iphoneimage/"/>
    <updated>2014-09-02T18:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/09/02/iphoneimage</id>
    <content type="html"><![CDATA[<h2>说明</h2>

<p>（iOS8不适用了）</p>

<h3>关于系统</h3>

<p>建议支持iOS7以上，目前iOS7占比91%。关于占比，见<a href="https://developer.apple.com/support/appstore/">官方说明</a>。<!--more--></p>

<h2>图标尺寸</h2>

<h3>icon说明</h3>

<p>| 名称      |  尺寸（ps） | 系统及iPhone  | 说明 |
| :&mdash;&mdash;&ndash; | &mdash;&mdash;&ndash;:| :&ndash;: | :&ndash;: |
| Icon-60.png  | 60x60 |  iOS7及以上，非Retina  | 应用图标 |
| <a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#x3a;&#x49;&#x63;&#x6f;&#x6e;&#x2d;&#x31;&#50;&#x30;&#64;&#x32;&#x78;&#x2e;&#x70;&#110;&#103;">&#x49;&#99;&#111;&#x6e;&#45;&#49;&#x32;&#x30;&#x40;&#50;&#x78;&#46;&#x70;&#110;&#x67;</a>  | 120x120 |  iOS7及以上，Retina  | 应用图标 |
| Icon-40.png  | 40x40 |  iOS7及以上，非Retina  | 应用图标，搜索中用 |
| <a href="&#109;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x49;&#x63;&#x6f;&#110;&#45;&#56;&#x30;&#x40;&#x32;&#120;&#x2e;&#x70;&#x6e;&#103;">&#x49;&#x63;&#x6f;&#110;&#x2d;&#56;&#48;&#64;&#50;&#120;&#x2e;&#112;&#110;&#x67;</a>  | 80x80 |  iOS7及以上，Retina  | 应用图标，搜索中用 |
| Icon-29.png  | 29x29 |  iOS7及以上，非Retina | 应用图标，设置中用 |
| <a href="&#x6d;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#73;&#99;&#x6f;&#x6e;&#x2d;&#x35;&#56;&#64;&#x32;&#120;&#x2e;&#112;&#x6e;&#x67;">&#x49;&#x63;&#111;&#110;&#45;&#53;&#x38;&#64;&#50;&#120;&#x2e;&#x70;&#110;&#x67;</a>  | 58x58 |  iOS7及以上，Retina  | 应用图标，设置中用
 |</p>

<h3>应用加载图片</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> 名称      </th>
<th style="text-align:right;">  尺寸（ps） </th>
<th style="text-align:center;"> 系统及iPhone  </th>
<th style="text-align:center;"> 说明 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> Default.png  </td>
<td style="text-align:right;"> 320x480 </td>
<td style="text-align:center;">  iOS7及以上，非Retina，iPhone4及之前iPhone </td>
<td style="text-align:center;"> 启动图片 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#68;&#x65;&#102;&#97;&#117;&#108;&#x74;&#64;&#50;&#x78;&#46;&#x70;&#x6e;&#103;">&#x44;&#x65;&#x66;&#x61;&#x75;&#x6c;&#116;&#64;&#x32;&#x78;&#x2e;&#112;&#110;&#x67;</a>  </td>
<td style="text-align:right;"> 640x960 </td>
<td style="text-align:center;">  iOS7及以上，Retina，iPhone4s  </td>
<td style="text-align:center;"> 启动图片 </td>
</tr>
<tr>
<td style="text-align:left;"> <a href="&#109;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#68;&#x65;&#102;&#x61;&#x75;&#x6c;&#x74;&#x5f;&#49;&#x31;&#51;&#x36;&#64;&#50;&#x78;&#x2e;&#112;&#x6e;&#103;">&#68;&#101;&#102;&#97;&#117;&#108;&#x74;&#x5f;&#x31;&#x31;&#51;&#54;&#x40;&#x32;&#120;&#46;&#x70;&#110;&#x67;</a>  </td>
<td style="text-align:right;"> 640x1136 </td>
<td style="text-align:center;">  iOS7及以上，Retina，iPhone5、iPhone5s </td>
<td style="text-align:center;"> 启动图片 </td>
</tr>
</tbody>
</table>


<h3>　</h3>

<ol>
<li>如果需要定制navigaion bar，tab bar等iOS标准控件，其上的图片需要具体分析。</li>
<li>所有图片需提供两套图片，一套给非Retina屏幕使用，为正常尺寸；一套给Retina屏幕使用，为正常尺寸的二倍，且需要命名为@2x。（如果只需要支持iPhone4s及之后的iPhone，只需要提供@2x图片，即正常尺寸的二倍的图片）</li>
</ol>


<h2>切图建议</h2>

<ol>
<li>所有图片需要为png格式</li>
<li>图片命名请和用途关联，最好一看就知道用在哪的（图片太多，这样容易分辨）。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《SQL必知必会》读书笔记（一）]]></title>
    <link href="http://rongyi.work/blog/2014/09/01/SQL1/"/>
    <updated>2014-09-01T18:06:00+08:00</updated>
    <id>http://rongyi.work/blog/2014/09/01/SQL1</id>
    <content type="html"><![CDATA[<h2>1、检索数据</h2>

<p>select 语句非常简单。就不复述了。需要注意几个点：</p>

<p><code>select * from products;</code>使用星号通配符来检索可以返回所有列。但需注意：</p>

<ol>
<li>除非确实需要检索表中每个列，否则最好不要使用*通配符。1）检索不需要的列会降低检索和应用程序的性能。2）可能会导致SQL注入。</li>
<li>使用*通配符有一个优点：能检索出名字未知的列。<!--more--></li>
</ol>


<h2>2、排序检索数据</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">prod_id</span><span class="p">,</span><span class="n">prod_name</span><span class="p">,</span><span class="n">prod_price</span> <span class="k">from</span> <span class="n">products</span> <span class="k">order</span> <span class="k">by</span> <span class="n">prod_price</span> <span class="k">DESC</span><span class="p">,</span><span class="n">prod_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ol>
<li><code>order by</code>子句可以按照一个或者多个列进行排序，例如按照姓和名排序，如果有多个相同的姓，这样做很有用。</li>
<li><code>order by</code>子句能按照列位置进行排序。如<code>select prod_id,prod_name from products order by 1, 2;</code></li>
<li><code>order by</code>子句可以指定排序方向：<code>DESC</code>,<code>DESCENDING</code>。默认是升序：<code>DESCENDING</code></li>
</ol>


<h2>3、过滤数据</h2>

<p>where子句的操作符解释：</p>

<table>
<thead>
<tr>
<th>操作符 </th>
<th> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>＝ </td>
<td> 等于</td>
</tr>
<tr>
<td>&lt; > </td>
<td> 不等于</td>
</tr>
<tr>
<td>!= </td>
<td> 不等于</td>
</tr>
<tr>
<td>&lt; </td>
<td> 小于</td>
</tr>
<tr>
<td>&lt;= </td>
<td> 小于等于</td>
</tr>
<tr>
<td>!&lt; </td>
<td> 不小于</td>
</tr>
<tr>
<td>> </td>
<td> 大于</td>
</tr>
<tr>
<td>>= </td>
<td> 大于等于</td>
</tr>
<tr>
<td>!> </td>
<td> 不大于</td>
</tr>
<tr>
<td>BETWEEN </td>
<td> 在指定的两个值之间</td>
</tr>
<tr>
<td>IS NULL </td>
<td> 为NULL值</td>
</tr>
</tbody>
</table>


<h2>4、高级数据过滤</h2>

<ol>
<li>and</li>
<li>or</li>
<li>in <code>select pro_name from products where vend_id in ('DLL01','BRS01') order by prod_name;</code></li>
<li>NOT：否定它之后所跟的任何条件。<code>select pro_name from products where NOT vend_id in ('DLL01','BRS01')</code>。注意mysql里只有 <code>not exist</code>。</li>
</ol>


<p>IN与OR比较：</p>

<ol>
<li>在使用长的合法选项清单时，IN操作符的语法更清楚且更直观。</li>
<li>在使用IN时，计算次序更容易管理（因为使用的操作符更少）。</li>
<li>IN操作符一般比OR操作符清单执行更快。</li>
<li>IN最大的优点是可以包含其他的SELECT语句，使得能够更动态地建立WHERE子句。</li>
</ol>


<h2>5、用通配符进行过滤</h2>

<p>like操作符使用的通配符</p>

<ol>
<li><code>%</code> 表示任何字符出现任意次数。</li>
<li><code>_</code> 匹配单个字符。</li>
<li><code>[]</code> 用来指定一个字符集，必须匹配指定位置的一个字符。如以J或者M开头的联系人：<code>select * from customers where name like '[JM]%'</code>

<h2>6、创建计算字段</h2></li>
<li>拼接字段：将值联结到一起构成单个值。使用<code>+</code>或者<code>||</code>。</li>
<li>使用别名。

<h2>7、使用数据处理函数</h2></li>
<li>文本处理函数：<code>UPPER()</code> <code>LOWER()</code> <code>LEFT()</code> <code>LTRIM()</code> <code>RTRIM()</code> <code>LENGTH()</code> <code>SOUNDEX()</code></li>
<li>日期和时间处理函数：<code>YEAR()</code>mysql支持。 <code>DATE_PART('year',date)</code>sqlserver和postgresql支持。 <code>to_date()</code>oracle支持。 <code>between</code>同样支持两个日期之间的检索。</li>
<li>数值处理函数：<code>ABS()</code> <code>COS()</code> <code>EXP()</code> <code>PI()</code> <code>SIN()</code> <code>SQRT()</code> <code>TAN()</code>

<h2>8、汇总数据</h2></li>
<li>聚集函数：<code>AVG()</code> <code>COUNT()</code> <code>MAX()</code> <code>MIN()</code> <code>SUM()</code>。聚集不同的值使用<code>DISTINCT</code>如：<code>select avg(distinct prod_price) as avg_price from products;</code></li>
</ol>


<h2>9、分组数据</h2>

<p>一个例子，返回每个供应商提供的产品数目
<code>select vend_id,count(*) as num_prods from products group by vend_id;</code></p>

<table>
<thead>
<tr>
<th>vend_id </th>
<th> num_prods</th>
</tr>
</thead>
<tbody>
<tr>
<td>BRS01 </td>
<td> 3</td>
</tr>
<tr>
<td>DLL01 </td>
<td> 4</td>
</tr>
<tr>
<td>FNG01 </td>
<td> 2</td>
</tr>
</tbody>
</table>


<h2>10、使用子查询</h2>

<p>使用in子句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">cust_id</span> <span class="k">from</span> <span class="n">orders</span> <span class="k">where</span> <span class="n">order_num</span> <span class="k">in</span> <span class="p">(</span><span class="k">select</span> <span class="n">order_num</span> <span class="k">from</span> <span class="n">orderItems</span> <span class="k">where</span> <span class="n">prod_id</span><span class="o">=</span><span class="s1">&#39;RGAN01&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>11、联结表</h2>

<p>SQL最强大的功能之一就是能在数据查询的执行中联结表。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">vend_name</span> <span class="p">,</span><span class="n">pro_name</span><span class="p">,</span> <span class="n">prod_price</span> <span class="k">from</span> <span class="n">vendors</span><span class="p">,</span><span class="n">products</span> <span class="k">where</span> <span class="n">vendors</span><span class="p">.</span><span class="n">vend_id</span> <span class="o">=</span> <span class="n">products</span><span class="p">.</span><span class="n">vend_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>内联结</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INNER</span> <span class="k">JOIN</span> <span class="p">..</span> <span class="k">ON</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">vend_name</span><span class="p">,</span> <span class="n">prod_name</span><span class="p">,</span> <span class="n">prod_price</span>
</span><span class='line'><span class="k">from</span> <span class="n">vendors</span><span class="p">,</span> <span class="n">products</span>
</span><span class='line'><span class="k">where</span> <span class="n">vendors</span><span class="p">.</span><span class="n">vend_id</span> <span class="o">=</span> <span class="n">products</span><span class="p">.</span><span class="n">vend_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上SQL所用到的联结称为等值联结，它基于两个表之间的等值测试。这种联结也称为内部联结。 <br/>
也可以使用如下语法来明确指定联结的类型：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">vend_name</span><span class="p">,</span> <span class="n">prod_name</span><span class="p">,</span> <span class="n">prod_price</span>
</span><span class='line'><span class="k">from</span> <span class="n">vendors</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span> <span class="n">products</span>
</span><span class='line'><span class="k">on</span> <span class="n">vendors</span><span class="p">.</span><span class="n">vend_id</span> <span class="o">=</span> <span class="n">products</span><span class="p">.</span><span class="n">vend_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了内部联结（等值联结）的简单联结。还有其他3种联结：自联结、自然联结和外部联结。</p>

<h3>自联结</h3>

<p>不止一次引用相同的表，通过表的别名进行比较。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="n">c1</span><span class="p">.</span><span class="n">cust_id</span><span class="p">,</span> <span class="n">c1</span><span class="p">.</span><span class="n">cust_name</span>
</span><span class='line'><span class="k">from</span> <span class="n">customers</span> <span class="k">as</span> <span class="n">c1</span><span class="p">,</span> <span class="n">customers</span> <span class="k">as</span> <span class="n">c2</span>
</span><span class='line'><span class="k">where</span> <span class="n">c1</span><span class="p">.</span><span class="n">cust_name</span> <span class="o">=</span> <span class="n">c2</span><span class="p">.</span><span class="n">cust_name</span>
</span><span class='line'><span class="k">and</span> <span class="n">c2</span><span class="p">.</span><span class="n">cust_contact</span> <span class="o">=</span> <span class="s1">&#39;jim jones&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>自然联结</h3>

<p>无论何时对表进行联结，应该至少有一个列出现在不止一个表中。
标准联结返回所有数据，甚至相同的列多次出现。
自然联结排除多次出现，使每一个列只返回一次。</p>

<p>规则：自然联结是这样一种联结，其中你只能选择那些唯一的列。这一般通过对表使用通配符（select *），对所有其他表的列使用明确的子集来完成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="k">C</span><span class="p">.</span><span class="o">*</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">order_num</span><span class="p">,</span> <span class="n">O</span><span class="p">.</span><span class="n">order_date</span>
</span><span class='line'><span class="k">from</span> <span class="n">customer</span> <span class="k">as</span> <span class="k">C</span> <span class="p">,</span> <span class="n">orders</span> <span class="k">as</span> <span class="n">O</span>
</span><span class='line'><span class="k">where</span> <span class="k">C</span><span class="p">.</span><span class="n">cust_id</span> <span class="o">=</span> <span class="n">O</span><span class="p">.</span><span class="n">cust_id</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>(注：这里通配符只对第一个表使用。所有其他列明确列出，所以没有重复的列将被检索出来。)</p>

<h3>外联结</h3>

<p>许多联结将一个表中的行与另一个表中的行相关联。但有时候需要包含没有关联行的那些行。
联结包含了那些在关联表中没有关联行的行。这些类型的联结称为外部联结。</p>

<h4>左（外）联结</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="p">..</span> <span class="k">ON</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">Persons</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">Persons</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderNo</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">Persons</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">Orders</span>
</span><span class='line'><span class="k">ON</span> <span class="n">Persons</span><span class="p">.</span><span class="n">Id_P</span><span class="o">=</span><span class="n">Orders</span><span class="p">.</span><span class="n">Id_P</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">Persons</span><span class="p">.</span><span class="n">LastName</span>
</span></code></pre></td></tr></table></div></figure>


<h4>右（外）联结</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">RIGHT</span> <span class="k">OUTER</span> <span class="k">JOIN</span> <span class="p">..</span> <span class="k">ON</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">Persons</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">Persons</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">Orders</span><span class="p">.</span><span class="n">OrderNo</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">Persons</span>
</span><span class='line'><span class="k">RIGHT</span> <span class="k">JOIN</span> <span class="n">Orders</span>
</span><span class='line'><span class="k">ON</span> <span class="n">Persons</span><span class="p">.</span><span class="n">Id_P</span><span class="o">=</span><span class="n">Orders</span><span class="p">.</span><span class="n">Id_P</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">Persons</span><span class="p">.</span><span class="n">LastName</span>
</span></code></pre></td></tr></table></div></figure>


<h2>12、组合查询</h2>

<p>SQL UNION 操作符<br/>
* UNION 操作符
列出所有在中国和美国的不同的雇员名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">E_Name</span> <span class="k">FROM</span> <span class="n">Employees_China</span>
</span><span class='line'><span class="k">UNION</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">E_Name</span> <span class="k">FROM</span> <span class="n">Employees_USA</span>
</span><span class='line'><span class="err">结果：</span>
</span><span class='line'><span class="n">E_Name</span>
</span><span class='line'><span class="err">——————————</span>
</span><span class='line'><span class="n">Zhang</span><span class="p">,</span> <span class="n">Hua</span>
</span><span class='line'><span class="n">Wang</span><span class="p">,</span> <span class="n">Wei</span>
</span><span class='line'><span class="n">Carter</span><span class="p">,</span> <span class="n">Thomas</span>
</span><span class='line'><span class="n">Yang</span><span class="p">,</span> <span class="n">Ming</span>
</span><span class='line'><span class="n">Adams</span><span class="p">,</span> <span class="n">John</span>
</span><span class='line'><span class="n">Bush</span><span class="p">,</span> <span class="n">George</span>
</span><span class='line'><span class="n">Gates</span><span class="p">,</span> <span class="n">Bill</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>UNION ALL 操作符</li>
</ul>


<p>列出在中国和美国的所有的雇员：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">E_Name</span> <span class="k">FROM</span> <span class="n">Employees_China</span>
</span><span class='line'><span class="k">UNION</span> <span class="k">ALL</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">E_Name</span> <span class="k">FROM</span> <span class="n">Employees_USA</span>
</span><span class='line'><span class="err">结果</span>
</span><span class='line'><span class="n">_____________</span>
</span><span class='line'><span class="n">E_Name</span>
</span><span class='line'><span class="n">Zhang</span><span class="p">,</span> <span class="n">Hua</span>
</span><span class='line'><span class="n">Wang</span><span class="p">,</span> <span class="n">Wei</span>
</span><span class='line'><span class="n">Carter</span><span class="p">,</span> <span class="n">Thomas</span>
</span><span class='line'><span class="n">Yang</span><span class="p">,</span> <span class="n">Ming</span>
</span><span class='line'><span class="n">Adams</span><span class="p">,</span> <span class="n">John</span>
</span><span class='line'><span class="n">Bush</span><span class="p">,</span> <span class="n">George</span>
</span><span class='line'><span class="n">Carter</span><span class="p">,</span> <span class="n">Thomas</span>
</span><span class='line'><span class="n">Gates</span><span class="p">,</span> <span class="n">Bill</span>
</span></code></pre></td></tr></table></div></figure>


<h2>13、插入数据</h2>

<ul>
<li>语法</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="err">表名称</span> <span class="k">VALUES</span> <span class="p">(</span><span class="err">值</span><span class="mi">1</span><span class="p">,</span> <span class="err">值</span><span class="mi">2</span><span class="p">,....)</span>
</span></code></pre></td></tr></table></div></figure>


<p>也可以指定要插入数据的列：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="k">table_name</span> <span class="p">(</span><span class="err">列</span><span class="mi">1</span><span class="p">,</span> <span class="err">列</span><span class="mi">2</span><span class="p">,...)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="err">值</span><span class="mi">1</span><span class="p">,</span> <span class="err">值</span><span class="mi">2</span><span class="p">,....)</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二种更安全，也更灵活（即使表结构发生改变也能正确工作。） <br/>
另外：可以只插入部分列。
* 插入检索出的数据（不管select语句返回多少行，都将被insert插入）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">select</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">insert</span> <span class="k">into</span> <span class="n">customers</span><span class="p">(</span><span class="n">id</span><span class="p">,</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="k">select</span> <span class="n">id</span><span class="p">,</span><span class="n">name</span> <span class="k">from</span> <span class="n">custnew</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>从一个表复制到另一个表<br/>
<code>select into</code>：与<code>insert select</code>的区别是，后者导出数据，前者导入表。</li>
</ul>


<p>MySql:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span> <span class="k">table</span> <span class="n">custcopy</span> <span class="k">as</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">customers</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oracle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="o">*</span>
</span><span class='line'><span class="k">into</span> <span class="n">custcopy</span>
</span><span class='line'><span class="k">from</span> <span class="n">customers</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>14、更新和删除数据</h2>

<p>更新数据：<code>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</code>;</p>

<p>删除数据：<code>DELETE FROM 表名称 WHERE 列名称 = 值</code>;</p>

<p>更新和删除应该遵循的习惯：</p>

<ol>
<li>除非确实要更新或者删除每一行，否则绝对不要使用不带where子句的update或者delete语句。</li>
<li>保证每个表都有主键。</li>
<li>在对update和delete语句使用where子句前，应该先使用select进行测试，保证它过滤的是正确的记录，以防编写的where子句不正确。</li>
<li>使用强制实施引用完整性的数据库，这样DBMS将不允许删除具有与其他表相关联的数据的行。（存疑）。</li>
<li>有的DBMS允许数据库管理员施加约束，以防止执行不带where子句的update或者delete。如果所采用的dbms支持这个特性，应该使用它。</li>
</ol>


<h2>15、创建和操纵表</h2>

<h3>创建表</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">Persons</span>
</span><span class='line'><span class="p">(</span>
</span><span class='line'><span class="n">Id_P</span> <span class="nb">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'><span class="n">LastName</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
</span><span class='line'><span class="n">FirstName</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
</span><span class='line'><span class="n">Address</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
</span><span class='line'><span class="n">City</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">default</span> <span class="s1">&#39;BeiJing&#39;</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>更新表</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">alter</span> <span class="k">table</span> <span class="n">vendors</span> <span class="k">add</span> <span class="n">vend_phone</span> <span class="nb">char</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span><span class="o">//</span><span class="err">增加列</span>
</span><span class='line'><span class="k">alter</span> <span class="k">table</span> <span class="n">vendors</span> <span class="k">drop</span> <span class="k">column</span> <span class="n">vend_phone</span><span class="p">;</span><span class="o">//</span><span class="err">删除列</span>
</span></code></pre></td></tr></table></div></figure>


<h3>删除表</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">drop</span> <span class="k">table</span> <span class="n">custcopy</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
